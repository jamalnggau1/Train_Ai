{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport json\nimport requests\nimport sys\n\nrequests.get(url=\"https://example.com\")\n\n# get the headers\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.headers)\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())", "id": "37f343d4-0363-452d-9868-669d18ee0f01", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\n\n# Step 1: Create an HTTP Basic auth object.\nauth = HTTPBasicAuth(\"USERNAME\", \"PASSWORD\")\n\n\n# Step 2: Create a Session Object.\nsession = requests.Session()\n\n# Step 3: Use the Session Object to make the POST Request.\nresponse = session.post(\"https://httpbin.org/post\", json={\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}, auth=auth)\n\n# Step 4: Print the Response Object.\nprint(f\"Response from the server:\\n{response.text}\")\n\n\n# Step 5: Use the Session Object to perform a GET Request.\nresponse = session.get(\"https://httpbin.org/get\")\n\n# Step 6: Print the Response Object.\nprint(f\"Response from the server:\\n{response.text}\")", "id": "378c5f40-6e22-44fe-899f-d5739bdf662e", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nimport random\nimport time\nimport datetime\nfrom multiprocessing import Process\n\n# Create data dictionary\ndata = {'name': 'test','surname': 'dz'}\n\n# Create a request\ndef get_data():\n    return requests.get('http://api.example.com/users')\n\n# Create a function to fetch data in json format\ndef get_json(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response\n    print(response.text)\n    # Return a Response object\n    return response.json()\n\n# Create a function to fetch data in data dictionary format\ndef get_data_dictionary(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response\n    print(response.text)\n    # Return a Response object\n    return response.json()\n\n# Create a function to fetch data in data dictionary format\ndef get_data_dictionary_list(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response", "id": "bdcf9d2f-4de0-493d-9d73-9dfd7bd89f92", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "# import requests\n# import json\n#\n# url = 'https://api.example.com/users'\n#\n# # response = requests.get(url)\n# # print(response.json())\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n#\n# # response = requests.get(url)\n# # print(response.text)\n# #\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status", "id": "94195975-5d56-4080-8a00-36892815aac1", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to swap MON to multiple tokens (WSOL, DAK, ETH, YAKI, CHOG) and swap back half to MON.", "input": "Using each wallet from wallets.txt, swap MON to each token listed above, then take 50% of each and swap it back to MON. Wait 6 hours before repeating the process.", "output": "import requests\nimport json\nimport pandas as pd\n\n# Get wallet data using get(URL) from url\ndef get_data(url):\n    response = requests.get(url)\n    json_data = json.loads(response.text)\n    return json_data\n\ndef get_mon():\n    mon = {}\n    mon['WSOL'] = 'https://finance.yahoo.com/quote/WSOL/sse?p=WSOL'\n    mon['DAK'] = 'https://finance.yahoo.com/quote/DAK/sse?p=DAK'\n    mon['ETH'] = 'https://finance.yahoo.com/quote/ETH/sse?p=ETH'\n    mon['YAKI'] = 'https://finance.yahoo.com/quote/YAKI/sse?p=YAKI'\n    mon['CHOG'] = 'https://finance.yahoo.com/quote/CHOG/sse?p=CHOG'\n    mon['DUK'] = 'https://finance.yahoo.com/quote/DUK/sse?p=DUK'\n    mon['DUK'] = 'https://finance.yahoo.com/quote/DUK/sse?p=DUK'\n    mon['DUK']", "id": "61734d11-650d-4685-839d-c4c7707aaea6", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "output": "# import os\n# import json\n# import datetime\n# import time\n# import sys\n# import requests\n# import json\n# import subprocess\n# import os\n# import pathlib\n# import shutil\n# from web3 import Web3\n# from web3.contract import Contract\n# from contract import hash_to_address, address_to_hash, get_monad_account\n# import keyring\n# from keyring.backends.mackeyring.client import MacKeyringClient\n# import keyring.util\n# import json\n# from web3.auto import w3\n# import keyring\n# import os\n# import pathlib\n# import shutil\n# from time import sleep\n# from web3.contract import Contract\n# from contract import hash_to_address, address_to_hash, get_monad_account\n\n\n# def main():\n#     contract_addr = get_monad_account()\n#     token = \"tokens/\" + contract_addr\n#     url = \"https://monad.monad.xyz/swap\"\n#     print(\"swap contract address: \" + contract_addr)\n#     print(\"swap token address: \" + token)\n#     print(\"url: \" + url)\n#     print(\"-----------------------------------\")\n#     print(\"start sw", "id": "5f5b9beb-c176-4628-a28c-80d0ded627f9", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "'''\nimport requests\n\nsession = requests.Session()\n\n# post\nr = session.post('https://example.com/api/login',\n                 json={\n                     \"email\": \"jamal@gmail.com\",\n                     \"pass\": \"123456\",\n                 }\n                 )\nprint(r.text)\n\n# get\nr = session.get('https://example.com/api/login')\nprint(r.text)\n'''", "id": "86bf6326-1545-492f-ac81-dd61de6609b7", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "from datetime import datetime, timedelta\nimport requests\nimport re\nimport json\nimport threading\nimport os\nimport logging\nimport time\nfrom argparse import ArgumentParser\nfrom urllib3.exceptions import NewConnectionError\n\n# For error handling\nrequests.packages.urllib3.disable_warnings()\n\n# Set up the logging\nlogging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)\n\n# Set up logging for API calls\nlogger = logging.getLogger(__name__)\n\n# Arguments\nparser = ArgumentParser(description='DATACUBE-MONAD-NETWORK-TOKEN-SWAP-ROUTER')\nparser.add_argument('-r', '--router', required=True, dest='router', help='Router IP address.')\nparser.add_argument('-u', '--user', required=True, dest='user', help='User to perform token swaps with.')\nparser.add_argument('-m', '--amount', required=True, dest='amount', help='Amount to be swapped.')\nparser.add_argument('-d', '--deadline', required=True, dest='deadline', help='Deadline of the token swaps in the future.')", "id": "3e2ca0b0-2352-4ba3-9393-5787a4cab1d1", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a script to check MON balance before swapping.", "input": "Before performing any swap action, ensure that the MON balance is sufficient. Skip the wallet if balance is below a minimum threshold.", "output": "import json\nimport requests\nimport time\nimport base64\n\n# Get the current balance\ndef getBalance():\n    url = 'https://api.monero.org/v2/monero/balance?limit=5000'\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']\n    else:\n        return None\n\n# Get the current address balance\ndef getAddressBalance():\n    url = 'https://api.monero.org/v2/monero/address/' + getWalletAddress()\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']\n    else:\n        return None\n\n# Get the current address balance\ndef getAddressBalance():\n    url = 'https://api.monero.org/v2/monero/address/' + getWalletAddress()\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']", "id": "d9e1ba5e-47b7-4eb9-846e-806980358c65", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nfrom pprint import *\n\n# get_ipython().run_line_magic('matplotlib', 'inline')\n\n# --------------------------------------------------------------------------------------------------------------------\n# GET USER DATA\n# --------------------------------------------------------------------------------------------------------------------\n\n# 1. GET\n# 1-1. Login\n# 1-2. Get user data\n# 1-3. Get data with access token\n# 1-4. Check data with bearer token\n# 1-5. Get user with token\n# 1-6. Get user with token\n# 1-7. Get user with token\n# 1-8. Get user data with access token\n# 1-9. Get user data with access token\n# 1-10. Get user data with access token\n# 1-11. Get user data with access token\n# 1-12. Get user data with access token\n# 1-13. Get user data with access token\n# 1-14. Get user data with access token\n# 1-15. Get user data with access token\n# 1-16. Get user data with access token\n# 1-17. Get user data with access token\n# 1-18. Get user data with access token\n# 1-19. Get user data with access token\n# 1-20. Get user data with access token\n# 1-21. Get user data with access token\n# 1-22. Get", "id": "e5034961-9bf7-4925-9167-da3b6bcf7684", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# [POST] https://example.com/api/login\n# {\n#    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MjM3ODA1NTk2MjYzMjQzNzE4MDAxMWViMjQ1NjI1MzQ0LTJhNDRmMzItMzkzNzM0ZjBhZDU2Y2ZmYjQzOCJ9.eyJpc3MiOiJodHRwczovL2ByZW5kZXJzaW9uIjoiMTI2MzU0MS1hMGUxNzg0MjY0MTAyNGE2MjYzOTI2Nzk0MjYzLCJhdWQiOiJodHRwczovL2ByZW5kZXJzaW9uIjoiYWJlIjoxNzE0MzU0Njk2YzA4MTYxNzE5MjA2MTM0MjM5MjYzMTIzNDUzNzg4LCJ", "id": "d1b05dba-fb1c-43b3-bcf1-f424fb83b662", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "# Imports\nimport requests\nimport datetime\nimport time\nimport json\nimport sys\nimport os\nimport re\nimport requests\nimport hashlib\nimport base64\nimport string\nimport binascii\nimport pandas as pd\nimport numpy as np\nimport threading\nimport concurrent.futures\nimport shutil\nimport shutil\nimport uuid\nimport time\n\n\nclass monad_network_har_wrapper:\n\n    # Constructor\n    def __init__(self, token_address, token_amount, token_deadline, token_wallet, token_wallet_address, token_wallet_amount, token_wallet_deadline,\n                 token_wallet_wallet_address, token_wallet_wallet_amount, token_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_address, token_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_wallet_address, token_wallet_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_wallet_wallet_address, token_wallet_wallet_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_wallet_wallet_deadline):\n        self.token_address = token", "id": "15c903c4-f05a-4a48-afd0-d0a553d2496e", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to run the entire MON swap routine in a loop with 6-hour delay.", "input": "Wrap the swap process in a while True loop, include try/except handling, and use time.sleep(21600) to wait between cycles.", "output": "import requests\nimport json\nimport time\nimport threading\n\nclass RestAPI():\n    def __init__(self, url, key, secret):\n        self.url = url\n        self.key = key\n        self.secret = secret\n\n    def get_swap_order(self, code):\n        params = {\n            'key': self.key,\n           'secret': self.secret,\n            'code': code\n        }\n        r = requests.get(url=self.url, params=params)\n        return json.loads(r.text)\n\nclass Swaps():\n    def __init__(self, swap_routine):\n        self.swap_routine = swap_routine\n\n    def get_swaps(self, code):\n        swap_order = self.swap_routine.get_swap_order(code)\n        if swap_order['code'] == code:\n            return swap_order['data']\n        elif swap_order['code']!= code:\n            raise Exception('Invalid swap code')\n        else:\n            raise Exception('Invalid swap order')\n\nclass SwapRoutine():\n    def __init__(self, api):\n        self.api = api\n\n    def get_swaps(self, code):\n        swap_order", "id": "a1bc2d66-69d0-44a4-96d3-7cfdeba42768", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "from requests import get, post\nfrom json import loads\n\ndef swap_mon():\n    swap_mon_dict = {\n    'NONE': '',\n    'BTC': 'BTC',\n    'ETH': 'ETH',\n    'XLM': 'XLM',\n    'USDT': 'USDT',\n    'DOGE': 'DOGE',\n    'TRX': 'TRX',\n    'USD': 'USD',\n    'EUR': 'EUR',\n    }\n    return swap_mon_dict.get(input('Input the amount of mon to swap in BTC: ').lower(), 'NONE')\n\ndef swap_tokens():\n    swap_tokens_dict = {\n    'NONE': '',\n    'BTC': 'BTC',\n    'ETH': 'ETH',\n    'XLM': 'XLM',\n    'USDT': 'USDT',\n    'DOGE': 'DOGE',\n    'TRX': 'TRX',\n    'USD': 'USD',\n    'EUR': 'EUR',\n    }\n    return swap_tokens_dict.get(input('Input the amount of tokens to swap in ETH: ').lower(), 'NONE')\n\ndef swap_all():\n    swap_", "id": "764ffccb-2820-49dc-958f-f3abfae93af2", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to log each transaction hash after a swap.", "input": "After each swap, print or save the transaction hash for tracking purposes.", "output": "import requests\nimport json\n\n## Step 1: Get the URL that returns the list of swaps and save it to a variable\n## Step 2: Make a GET request to the URL and save it to a variable called data\n## Step 3: Print the data from the response\n\n# url = \"https://api.coingecko.com/api/v3/swaps/cached/\"\n# response = requests.get(url)\n# data = response.json()\n\n# print(data)  # prints a list of dictionaries\n# print(data[0])  # prints the first dictionary\n# print(data[:10])  # prints the top 10 results\n\n# Create a variable named data, which is a list of dictionaries\ndata = []\n\n# Step 4: Loop through each item in data, and add it to a variable named coin_name\nfor coin in data:\n    coin_name = coin['name']\n    if coin_name!= \"Bitcoin\":\n        coin_name = \"Bitcoin\"\n    print(\"coin name: \", coin_name)  # prints the coin name\n\n    # Step 5: Print the data from the coin's current price data\n    coin_price = coin['current_price']['usd']\n    print(\"current price: \", coin_price)  # prints the current price\n\n    # Step 6", "id": "5d4321d2-9829-4830-a85c-2e8a5ae34221", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "# Import the requests package\nimport requests\n\n# Import the json module\nimport json\n#Import the time module\nimport time\n#Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport requests as r\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport requests\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json", "id": "8a29c60e-b854-4f1f-926a-b713a8c95ef7", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "output": "# Code:\n\n# 1. Create a script that will perform a transaction that swaps Monad to Monad.\n# 2. Run the script using a custom router on testnet.monad.xyz and loop to check if the swap is successful.\n\n\n# Importing the libraries\nimport requests\nimport json\n\n# Getting the API key\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\n# Getting the token\nimport os\nos.environ['API_KEY'] = 'F48D5B5D6D8F0CED7E4E0A'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'YBZ5R2J2SZCLPX6H7KW'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'Z6C46A2F5D5E8DFE7E9E'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'B6C88F3F4C77E12C0A7B6'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'A2C3B2C0B7A8A7E3D4E'\n\n# Getting the API", "id": "abfbd057-0910-476d-90cb-5a590aaeae11", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# import requests\n# import json\n#\n#\n# def login():\n#     data = {\n#         \"email\": \"jamal@gmail.com\",\n#         \"pass\": \"123456\"\n#     }\n#     response = requests.post(\"https://example.com/api/login\", data)\n#     # check if status code is 200, raise an HTTPException if not\n#     if response.status_code!= 200:\n#         raise ValueError(f'HTTP status code is {response.status_code}')\n#     # return response object\n#     return response.json()\n#\n#\n# def create_room(room_id, name, members):\n#     data = {\"room_id\": room_id, \"name\": name, \"members\": members}\n#     response = requests.post(\"https://example.com/api/room\", data)\n#     if response.status_code!= 201:\n#         raise ValueError(f'HTTP status code is {response.status_code}')\n#     return response.json()\n#\n#\n# def update_room(room_id, name, members):\n#     data = {\"room_id\": room_id, \"name\": name, \"members\": members}\n#     response = requests.put(\"https://example.com/", "id": "7884509d-8fdb-4d15-9dad-cadee220c05b", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nfrom requests.auth import HTTPBasicAuth\n\n\n\n# creating a function for getting the data from a url\ndef get(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)\n        return None\n\n\n# creating a function for getting the data from a url\ndef get_name(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)\n        return None\n\n\n# creating a function for getting the data from a url\ndef get_email(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)\n        return None\n\n\n# creating a function for getting the data from a url\ndef get_phone(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)", "id": "f63c1eeb-bba1-4250-aa95-b2e261b2ba5e", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\n\n# [GET] https://api.example.com/users\n\n\n# [GET] https://api.example.com/users\n# [GET] https://api.example.com/users/2\n\n\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n\n# [GET] https://api.example.com/users/2\n# https://api.example.com/users/2\n# https://api.example.com/users/2\n# https://api.example.com/users/2\n\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users", "id": "0acafe74-21c9-4d33-a149-cb2385268092", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "output": "import requests\nimport hashlib\nimport json\nimport time\nimport os\n\n# Function to generate a sha256 hash of the token dictionary.\ndef sha256(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_hex(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_decode(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_decode_hex(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_decode_int(tokenDict):\n    my", "id": "8f7e850d-f8b0-4ffc-82da-10fa33b47475", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\n\n# GET /users/:user_id\n# Response: {'id': user_id, 'email': 'test@example.com', 'first_name': 'John', 'last_name': 'Doe'}\n# Response: [{'id': 1, 'email': 'test@example.com', 'first_name': 'John', 'last_name': 'Doe'}]\n# Response: [{'email': 'test@example.com', 'first_name': 'John', 'last_name': 'Doe'}]\n\nprint('\\n--- Python script for fetching user data ===')\n\n# url = 'http://api.example.com/users/1'\n# response = requests.get(url)\n# print(response.json())\n\n\n# url = 'http://api.example.com/users'\n# headers = {\n#     'Authorization': 'Basic Zm7NmNmLTQzMTcxMjM0MjI5MjA2MTg3'\n# }\n# response = requests.get(url, headers=headers)\n# print(response.json())\n\n# url = 'http://api.example.com/users'\n# headers = {\n#     'Authorization': 'Basic YTJXN", "id": "e0e3fb34-f258-4108-8128-2406011812a8", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# POST:\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jenni@gmail.com\", \"pass\": \"12345678\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"password\": \"123456\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"password\": \"123456\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"12345678\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jenni@gmail.com\", \"pass\": \"12345678\"}\n# {\"email\": \"jenni@gmail.com\", \"pass\": \"123456789\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"", "id": "e9f75b2e-0cbd-4e28-acd2-a9fbc906d6bd", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "# import requests\n# import json\n# from requests.auth import HTTPBasicAuth\n#\n# base_url = \"https://api.example.com\"\n# headers = {'Content-Type': 'application/json'}\n#\n# # Authentication\n# auth = HTTPBasicAuth('my_username','my_password')\n#\n# # Query /users GET\n# response = requests.get(base_url + \"/users\", headers=headers, auth=auth)\n#\n# # print(response.status_code)\n# # print(response.text)\n# # print(response.headers)\n# # print(response.json())\n#\n# print(response.json())\n# print(response.text)\n\nfrom urllib.request import urlopen\n\nimport json\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport requests\nimport time\n\n# User_ID = input(\"Enter your user ID : \")\n#\n#\n# def get_stations():\n#     # print('get_stations called')\n#     response = requests.get(base_url + \"/stations\", headers=headers, auth=auth)\n#     # print(response.status_code)\n#     # print(response.text)\n#     # print(response.", "id": "48ecc971-b23b-4800-916d-fd952bbdd256", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# Output:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 2: Use the requests module to call the requests.post() function and store the response in a variable called response.\n# Details: [POST] https://example.com/api/login\n# Response body:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 3: Use the requests module to call the request.post() function and store the response in a variable called result.\n# Details: [POST] https://example.com/api/login\n# Response body:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 4: Use the requests module to call the request.get() function and store the response in a variable called result.\n# Details: [GET] https://example.com/api/login\n# Response body:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 5: Use a for loop to iterate over the response variable and store the value of the key-value pair in a", "id": "977cb5d9-07f8-47cd-ba26-cc7c98905728", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# Request body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Request headers:\n# Content-Type: application/json\n#\n# Headers:\n# Authorization: Bearer <token>\n# User-Agent: Python-requests/2.23.0\n#\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Response body (JSON):\n# [{\"id\": 1, \"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}]\n\n# Response headers (JSON):\n# {\n#     \"Content-Type\": \"application/json\",\n#     \"Content-Disposition\": \"inline; filename=api-login.json\",\n#     \"Content-Length\": \"36\",\n#     \"User-Agent\": \"Python-requests/2.23.0\",\n#     \"Accept\": \"application/json\",\n#     \"Accept-Charset\": \"UTF-8\"\n# }\n\n# Response headers (JSON):\n# {\n#     \"Content-Type\": \"application/json\",\n#     \"Content-Disposition\": \"inline; filename=api-login.json\",\n#     \"Content-Length\": \"36\",\n#     \"User-Agent\":", "id": "eea4a7b2-884e-4172-8fd3-c298e7141c82", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "import requests\nfrom bs4 import BeautifulSoup\nimport re\n# import json\n# import datetime\nimport time\nimport os\nimport yaml\n\n# import sys\n# sys.path.append('/Users/sakibot/projects/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/')\n# for", "id": "d6fd8475-eab5-452f-a628-2efec1c90dde", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# The code in the script represents the simplest possible HTTP request. The request is sent to the API through the `requests` module.\n\n# The output of the script is:\n\n# POST\n# {\n# \t\"email\": \"jamal@gmail.com\",\n# \t\"pass\": \"123456\"\n# }\n\n# The request body should be a JSON object with the following structure:\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# The input body should be a JSON object with the following structure:\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# The output body should be an empty dictionary object which is returned from the script.\n\n# Here are the examples of the input and output objects:\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# {\"email\": \"jamal@gmail.com\", \"", "id": "756320ec-03d1-4eaf-b567-9aaf3ce9f722", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nimport base64\n\n# Step 1: Create a function to query the API\ndef get_request_body(url, params):\n    \"\"\"\n    Parameters:\n        url (string): API endpoint\n        params (dictionary): query parameters\n\n    Returns:\n        response (object): The response object from the API\n    \"\"\"\n    response = requests.get(url, params=params)\n    return response\n\n\n# Step 2: Create a function to validate the API output\ndef validate_output(response):\n    \"\"\"\n    Parameters:\n        response (object): The response object from the API\n\n    Returns:\n        valid (bool): True if the output is valid, False otherwise\n    \"\"\"\n    valid = True\n    if'status' in response.keys():\n        if response['status']!= 200:\n            valid = False\n    return valid\n\n# Step 3: Create a function to convert the JSON response back to a Python dictionary\ndef response_to_dictionary(response):\n    \"\"\"\n    Parameters:\n        response (object): The response object from the API\n\n    Returns:\n        response_dict (dictionary): The response object as a dictionary\n    \"\"\"\n    try:\n        return response.json()\n    except ValueError:\n        return response.text\n\n# Step 4: Create a function to convert the", "id": "c5bba4aa-cb3b-4221-bdb1-afd90ccd1c50", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "import requests\nimport re\nimport json\nimport os\nimport time\nimport logging\nimport sys\nimport configparser\nimport collections\n\n# read from.har file\nclass HarReader:\n    def __init__(self, path):\n        \"\"\"\n        Initializes the har reader\n        :param path: path\n        \"\"\"\n        # reading data from.har file\n        try:\n            with open(path, \"r\") as f:\n                self.har_data = f.read()\n        except FileNotFoundError:\n            print(\"File not found\")\n            sys.exit()\n        except Exception as e:\n            print(\"Unexpected error:\", e)\n            sys.exit()\n\n    def get_all_data(self):\n        \"\"\"\n        Gets all tokens and their data from the.har file\n        :return: data\n        \"\"\"\n        # return tokens and data from.har file\n        # extract tokens from.har file\n        tokens_data = re.findall(r\"\\{\\\"tokens\\\":\", self.har_data)\n        # extract data from.har file\n        tokens = re.findall(r\"\\{\\\"tokens\\\":\\s*(\\S+)\", tokens_data[0])\n        # extract data from.har file\n        wallets = re", "id": "6aca898d-9aab-4f6d-ad57-7e52ff9d9d1f", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# Outputs:\n\n# <Response [200]>\n# {\n#     \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2NvZG9uZG9uZS5weXNlcnJ9.ZXHwY29tcGVkLmNvbSIsImV4cCI6MTYyMzU5NzE3NTEzLTg0OTI0OWRlMzE5LTE1NTE1NjQwMHQ1NjM5LTE1MHcwMCIsImV4cCI6MTYyMzYzOTM3LTg0OTU5LCJleHAiOjE2MzQ5NzY5NTY2MzE5OCIsImV4cCI6MTYyMzU5NzE3MjU2NDY3NzE3LTA1LWI1ZjItZW51ZTJhYjVkNGQwYjUwMzk3NTEtMzI0MTAzODQwZmFkZDQ1MzNmQzZ", "id": "9e08bb02-444b-443a-8842-4316df676a94", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to swap MON to multiple tokens (WSOL, DAK, ETH, YAKI, CHOG) and swap back half to MON.", "input": "Using each wallet from wallets.txt, swap MON to each token listed above, then take 50% of each and swap it back to MON. Wait 6 hours before repeating the process.", "output": "# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport json\n\n# import libraries for json\nimport requests\nimport json\nimport os\nimport time\nimport threading\nfrom datetime import datetime, timedelta\nimport pytz\nimport hashlib\n\n# function to get the number of days since yesterday\ndef get_days_since_yesterday(yesterday_date):\n    today = datetime.today()\n    difference = (datetime.strptime(yesterday_date, \"%Y-%m-%d %H:%M:%S\") - today).days\n    return difference\n\n# function to get the last updated price\ndef get_last_updated_price(wallet_list):\n    # get the last updated price\n    # get the latest updated price from a wallet list\n    # return the last updated price in a dictionary format\n    latest_price = ''\n    for wallet in wallet_list:\n        latest_price = wallet['price']\n        break\n    return latest_price\n\ndef extract_details(wallet_list):\n    # extract the details of each wallet\n    details_dict = {}\n    # create the dictionary to store details\n    for wallet in wallet_list:\n        details_dict[wallet['name']] = wallet['price']\n    return details_dict", "id": "a609c231-a85c-4bbb-97cb-faebf5adaa86", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "import requests\nimport json\nfrom tkinter import *\n\nclass swap:\n    def __init__(self, app):\n        self.app = app\n        self.swap_amount = str(0.00)\n        self.swap_amount_text = StringVar()\n        self.swap_amount_text.set(\"0.00\")\n        self.swap_amount_text.trace(\"w\", self.update_swap_amount)\n\n    def update_swap_amount(self, *args, **kwargs):\n        self.swap_amount = str(self.app.swap_amount_text.get())\n        self.app.amount = float(self.swap_amount)\n        self.app.show_balance()\n\n    def run(self):\n        self.app.run()\n\nclass main:\n    def __init__(self):\n        self.root = Tk()\n        self.root.title(\"Swap Your Money\")\n        self.root.geometry(\"550x370\")\n        self.root.columnconfigure(0, weight=1)\n        self.root.rowconfigure(0, weight=1)\n        self.root.grid_rowconfigure(0, weight=1)\n        self.root.grid_columnconfig", "id": "a4b457d2-2b26-48fe-bcbc-05fec488df38", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Generate a Python script to send a POST request to an API using the requests module.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "import requests\n# url = \"https://api.github.com\"\n# headers = {\n#     \"Content-Type\": \"application/json\",\n#     \"Accept\": \"application/json\",\n#     \"Authorization\": \"token abcdefghijklmnopqrstuvwxyz\"\n# }\n# response = requests.post(url, headers=headers)\n# print(response.content.decode('utf-8'))\n\n# url = \"https://httpbin.org/post\"\n# headers = {\n#     \"Content-Type\": \"application/json\",\n#     \"Accept\": \"application/json\",\n#     \"Authorization\": \"token abcdefghijklmnopqrstuvwxyz\"\n# }\n# response = requests.post(url, headers=headers, data={\"key\": \"value\"})\n# print(response.content.decode('utf-8'))\n\nurl = \"https://httpbin.org/post\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"token abcdefghijklmnopqrstuvwxyz\"\n}\n# response = requests.post(url, headers=headers, json={\"key\": \"", "id": "d8d5b556-ceb0-4ea1-916a-269c0bd1c024", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Write a Python script that runs an infinite loop, catching exceptions and retrying after delay.", "input": "Perform a set of API or blockchain interactions in a try/except block and retry after 10 seconds if an exception occurs.", "output": "import requests\nimport time\n\nwhile True:\n    try:\n        resp = requests.get('http://api.ipify.org/')\n        ip = resp.text\n        print(f\"IP address of the network: {ip}\")\n        break\n    except Exception as e:\n        print(f\"Error: {e}\")\n        print(\"Exception occurred in the script, retrying in 10 seconds...\")\n        time.sleep(10)\n        continue", "id": "b8d14909-7db6-4421-8186-f6641d80ac97", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "\"\"\"\nimport requests\nimport json\nimport time\n\n# Request body\nrequestB = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Request header\nheaders = {\"Content-Type\": \"application/json\"}\n\n# Request data\ndata = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Send request\nr = requests.post(\"http://httpbin.org/post\", json=data, headers=headers)\n\n# Response\nprint(r.text)\nprint(r.headers)\nprint(r.status_code)\n\n# Check status code\nprint(r.status_code)\n\n# Check content\nprint(r.content)\n\n# Check response headers\nprint(r.headers)\n\n# Get response headers\nprint(r.headers[\"Content-Type\"])\n\n# Get response body\nprint(r.headers[\"Content-Type\"])\n\n# Get response body:\nprint(r.content)\n\n\"\"\"\n\n# Write a Python script that accepts a URL as an argument and prints the content of the response.\n#\n# HINT: The script should look as follows:\n#\n# response = requests.get(\"https://httpbin.org/get\")\n#\n# Write a Python script to display the content of", "id": "144dfea9-aad1-463f-87cf-97b8a636c985", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "import requests\nimport os\nimport json\nimport time\nimport random\nimport requests\nfrom datetime import datetime\nimport datetime\nimport requests\nimport urllib\nimport sys\nimport subprocess\nimport threading\nfrom pathlib import Path\n\n# Define the token dictionary as a dictionary with the following key-value pairs:\n# \"token\" (string)\n# \"address\" (string)\n# \"amount\" (int)\n# \"deadline\" (string)\n# \"wallet\" (string)\n# \"token_address\" (string)\n# \"token_amount\" (int)\n# \"token_deadline\" (string)\n# \"user_address\" (string)\n# \"user_wallet\" (string)\n# \"user_wallet_address\" (string)\n# \"user_wallet_amount\" (int)\n# \"user_wallet_deadline\" (string)\n\n# The function will create a.har file with the following contents:\n# token: <token_id>\n# address: <address_id>\n# amount: <amount>\n# deadline: <deadline>\n# wallet: <wallet>\n# token_address: <token_address>\n# token_amount: <token_amount>\n# token_deadline: <token_deadline>\n# user_address: <", "id": "585cca57-a52c-4bb3-b032-83bf7341789f", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "# Output\nHeaders:\nContent-Type: application/json\n\n{\n    \"email\": \"jamal@gmail.com\",\n    \"pass\": \"123456\"\n}\n\"\"\"\n\nimport requests\nimport json\n\n# Create the API Endpoint\nURL = \"https://reqres.in/api/users/login\"\n# Set a Headers header for the API Endpoint\nHEADERS = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# Use the requests library to make a GET request\nresponse = requests.get(url=URL, headers=HEADERS)\nprint(response.status_code)\nprint(response.headers)\n\n# Print the response JSON\nprint(response.json())\n\n# Print the response text\nprint(response.text)\n\n# Print the response headers\nprint(response.headers)\n\n# Print the response body\nprint(response.json())\n\n# Create a Body for the request\nbody = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Use the requests library to make a POST request\nresponse = requests.post(url=URL, data=body, headers=HEADERS)\nprint(response.status_code)\nprint(response.headers)\nprint(response.", "error": "  File \"/tmp/tmp4ms0h5li.py\", line 9\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 46)\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\nimport json\n\n# Make an API call and store the response.\nurl = 'https://api.example.com/users'\nr = requests.get(url)\ndata = r.json()\nprint(data)\n\n# Add a conditional if-statement to test the status code.\nif r.status_code!= 200:\n    print('Error: ', r.status_code)\n\n# Add a print statement to print the result.\nprint(data['email'])\nprint(data)\n\n# Add a nested dictionary to the user dictionary.\nuser = {\n    'name': 'John',\n    'age': 37,\n    'location': 'San Francisco',\n    'email': 'john@example.com'\n}\n\n# Convert the dictionary into a JSON string.\njson_data = json.dumps(user)\nprint(json_data)", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x7535ad303da0>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7535ad303da0>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpc01eilt0.py\", line 6, in <module>\n    r = requests.get(url)\n        ^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7535ad303da0>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "generated": "import requests\nimport os\nfrom pathlib import Path\nimport json\nimport shutil\nimport time\n\n# Get current working directory\ncwd = Path.cwd()\n# Create a folder to store the.har files\nhar_folder = os.path.join(cwd, 'har_files')\n# Create a folder to store the.csv files\ncsv_folder = os.path.join(cwd, 'csv_files')\n# Create a folder to store the.json files\njson_folder = os.path.join(cwd, 'json_files')\nif not os.path.exists(har_folder):\n    os.mkdir(har_folder)\nif not os.path.exists(csv_folder):\n    os.mkdir(csv_folder)\nif not os.path.exists(json_folder):\n    os.mkdir(json_folder)\n\n\n# Create a json file to store the csv files\njson_file = os.path.join(json_folder,'monad_token_swap.json')\nwith open(json_file, 'w') as outfile:\n    json.dump({}, outfile)\n\n\n# Create a csv file to store the.har files\ncsv_file = os.path.join(csv_folder,'monad_", "error": "  File \"/tmp/tmp932jlruc.py\", line 31\n    csv_file = os.path.join(csv_folder,'monad_\n                                       ^\nSyntaxError: unterminated string literal (detected at line 31)\n"}
{"instruction": "Create a Python script to automate swapping MON to USDT using the DZap platform on Monad network.", "input": "Use Web3.py and interact with https://app.dzap.io or its contract. Token MON is already approved. Loop through each wallet from wallets.txt, perform the swap, and repeat every 6 hours.", "generated": "import requests\nimport json\nimport time\nimport os\n\n# Read wallet file\nwith open('wallet.txt') as f:\n    wallets = [line.replace('\\n', '').replace('\\r', '') for line in f]\n\n# Create API call\napi_url = 'https://app.dzap.io/'\napi_data = {\n    'contracts': [],\n    'credentials': [['mon_contract_1','mon_api_1','mon_tokens_1'],\n                    ['mon_contract_2','mon_api_2','mon_tokens_2'],\n                    ['mon_contract_3','mon_api_3','mon_tokens_3']],\n   'mon_contract_1': wallets[0][1],\n   'mon_contract_2': wallets[1][1],\n   'mon_contract_3': wallets[2][1],\n    'account': \"\",\n    'data_type': \"\",\n    'token_name': \"mon_api_1\",\n    'platform': \"dzap\"\n}\n\n# API call\nresponse = requests.request('POST', url=api_url, data=json.dumps(api_data))\n\n# Parse", "error": "Traceback (most recent call last):\n  File \"/tmp/tmpdkhv1h46.py\", line 7, in <module>\n    with open('wallet.txt') as f:\n         ^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'wallet.txt'\n"}
{"instruction": "Write a Python script to swap MON to multiple tokens (WSOL, DAK, ETH, YAKI, CHOG) and swap back half to MON.", "input": "Using each wallet from wallets.txt, swap MON to each token listed above, then take 50% of each and swap it back to MON. Wait 6 hours before repeating the process.", "generated": "from requests_oauthlib import OAuth1Session\nimport json\nimport time\n\n# Authentication\n\n# API-1\nclass Wallet:\n    def __init__(self, username, password, url, api_id, api_key, api_secret):\n        self.username = username\n        self.password = password\n        self.url = url\n        self.api_id = api_id\n        self.api_key = api_key\n        self.api_secret = api_secret\n        self.session = OAuth1Session(self.username, self.password, base_url=self.url, token_url=\"https://api.etherscan.io/api\")\n    \n    def get_balance(self, address):\n        return json.loads(self.session.get(self.url+\"/address/\" + address).text)['result']\n\n    def get_balance_dict(self, address):\n        return json.loads(self.session.get(self.url+\"/address/\" + address).text)['result']\n\n    def get_balance_multiple(self, addresses):\n        balances = {}\n        for address in addresses:\n            balances[address] = self.get_balance(address)\n        return balances\n    \n    def swap_balances(self, address1,", "error": "  File \"/tmp/tmp0qxkdp7y.py\", line 30\n    def swap_balances(self, address1,\n                     ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Create a script to check MON balance before swapping.", "input": "Before performing any swap action, ensure that the MON balance is sufficient. Skip the wallet if balance is below a minimum threshold.", "generated": "import requests\nimport json\n\n# check balance\ndef checkBal():\n    response = requests.get(\"http://localhost:8080/getBalance\")\n    print(response.json())\n    if response.json()[\"balance\"] <= 0:\n        return \"balance is too low\"\n    else:\n        return \"balance is ok\"\n\n# swap\ndef swap():\n    amount = input(\"amount to swap\")\n    swap = int(amount)\n    response = requests.get(\"http://localhost:8080/swap\")\n    if swap > response.json()[\"balance\"]:\n        print(\"sorry you don't have enough money to swap\")\n    else:\n        response = requests.get(\"http://localhost:8080/swap\")\n        print(response.json())\n    return \"swap was done\"\n\n# check if balance has enough to swap\ndef checkBal():\n    # check balance\n    response = requests.get(\"http://localhost:8080/getBalance\")\n    balance = response.json()[\"balance\"]\n    if balance <= 0:\n        print(\"no money to swap\")\n    else:\n        print(\"balance is\", balance)\n        checkBal()\n\n# main\nwhile True:\n    command = input()\n    if command == \"swap\":\n        print(swap())", "error": "Script execution timed out."}
{"instruction": "Generate a script to read private keys from a text file and derive wallet addresses.", "input": "Use wallets.txt as input, extract private keys, and use Web3.py to print corresponding wallet addresses on Monad testnet.", "generated": "# Create function to read private keys from a text file\ndef readPrivateKey(filename):\n    privateKeys = []\n    with open(filename, 'r') as f:\n        for line in f:\n            if line[0:2] == \"32\":\n                privateKeys.append(line[2:].strip())\n    return privateKeys\n\n\n# Create function to read wallet addresses from a text file\ndef readWalletAddresses(filename):\n    addresses = []\n    with open(filename, 'r') as f:\n        for line in f:\n            if line[0:2] == \"32\":\n                addresses.append(line[2:].strip())\n    return addresses\n\n\n# Create script\ndef script():\n    privateKeys = readPrivateKey('privateKeys.txt')\n    walletAddresses = readWalletAddresses('wallets.txt')\n    \n    # Create list of wallets and wallet addresses to print\n    wallets = []\n    for i in range(len(privateKeys)):\n        wallet = privateKeys[i] + \":\" + walletAddresses[i]\n        wallets.append(wallet)\n        \n    # Print wallet\n    print(\"\\nWallet(s)\")\n    print('-'.join(wallets))\n    print(\"\\n\")\n\n\n# Main function\nif", "error": "  File \"/tmp/tmp3n4tarsl.py\", line 39\n    if\n      ^\nSyntaxError: invalid syntax\n"}
{"instruction": "Write a Python script to run the entire MON swap routine in a loop with 6-hour delay.", "input": "Wrap the swap process in a while True loop, include try/except handling, and use time.sleep(21600) to wait between cycles.", "generated": "\"\"\"\n#!/usr/bin/python3\n# -*- coding: UTF-8 -*-\nimport requests\nimport json\nimport sys\n\n# Function to get the current timestamp\ndef getTime():\n\treturn time.time()\n\n\n# Function to get the current date\ndef getDate():\n\treturn time.strftime(\"%Y%m%d\", time.localtime())\n\n\n# Function to get the current time\ndef getTimeNow():\n\treturn time.strftime(\"%H:%M:%S\", time.localtime())\n\n\n# Function to get the current time\ndef getTimeNowISO():\n\treturn time.strftime(\"%H:%M\", time.localtime())\n\n\n# Function to get the current time\ndef getTimeNowUTC():\n\treturn time.strftime(\"%H:%M\", time.localtime(0))\n\n\n# Function to get the current time\ndef getTimeNowUTC_ISO():\n\treturn time.strftime(\"%H:%M:%S\", time.localtime(0))\n\n\n# Function to get the current time\ndef getTimeNowUTC_ISO_Z():\n\treturn time.strftime(\"%H:%M:%S.%Z\", time.localtime(0))\n\n\n# Function to get the current time\ndef getTimeNow", "error": "  File \"/tmp/tmp0vgj3nvx.py\", line 1\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 44)\n"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "generated": "import json\nimport requests\nimport time\nimport urllib\nimport urllib3\nfrom urllib3 import response\nfrom requests.packages import urllib3\nfrom requests.adapters import HTTPAdapter\nfrom six.moves.urllib.parse import urlencode\nfrom datetime import datetime\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# create a list of users\nusers = [\n    {'from': 'Monad', 'to': 'WEST', 'token': '1234'},\n    {'from': 'WEST', 'to': 'WEST', 'token': '4321'},\n    {'from': 'WEST', 'to': 'WEST', 'token': '1234'},\n    {'from': 'WEST', 'to': 'WEST', 'token': '4321'}\n]\n\n# create a list of tokens\ntokens = [\n    {'from': 'MON', 'to': 'WEST', 'token': '1234'},\n    {'from': 'MON', 'to': 'WEST', 'token': '4321'},\n    {'from': 'MON', 'to': 'WEST', 'token': '1234'},\n    {'from': 'MON', 'to': 'W", "error": "  File \"/tmp/tmp536jsbg6.py\", line 28\n    {'from': 'MON', 'to': 'W\n                          ^\nSyntaxError: unterminated string literal (detected at line 28)\n"}
{"instruction": "Write a Python script that reads private keys from a file and prints the wallet balances in MON using Web3.py.", "input": "Use wallets.txt file as source of private keys. Connect to https://testnet-rpc.monad.xyz and print balance in Ether for each address.", "generated": "import requests\nfrom web3 import Web3\n\n# Getting private key from file\nprivate_key = open('private_keys.txt', 'r').read()\n\n# Getting balance from mon\nmon_balance = Web3.fromWei(\n    requests.get('https://testnet-rpc.monad.xyz/balance').json()['result']['balance'],\n    'ether')\n\n# Getting address from file\naddress = input('What is the address? ')\n\n# Getting balance of address from mon\nbalances = Web3.fromWei(\n    requests.get(f'https://testnet-rpc.monad.xyz/balance/{address}').json()['result']['balance'],\n    'ether')\n\nprint('Monad wallet balance is:', balances)", "error": "Traceback (most recent call last):\n  File \"/tmp/tmpweranmck.py\", line 2, in <module>\n    from web3 import Web3\nModuleNotFoundError: No module named 'web3'\n"}
{"instruction": "Generate a Python script to send a POST request to an API using the requests module.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "# Output\n[{\n\"email\": \"jamal@gmail.com\",\n\"pass\": \"123456\"\n}]\n\"\"\"\nimport requests\nimport json\nimport time\n\nurl = 'http://127.0.0.1:8000/api/login'\ndata = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\nresponse = requests.post(url=url, data=json.dumps(data))\nprint(response.text)", "error": "  File \"/tmp/tmpmcizyduy.py\", line 6\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 14)\n"}
{"instruction": "Create a Python script to fetch user data from a public API.", "input": "[GET] https://api.example.com/users", "generated": "import requests\nimport json\nimport os\n\n# Get the API token from environment variable for authentication\n# and assign the token to variable API_TOKEN\napi_token = os.getenv('API_TOKEN')\nif api_token == None:\n    print(\"Error: API token not found.\")\n    exit(1)\nelse:\n    API_TOKEN = api_token\n\n# Get the API hostname from environment variable for use in API calls\n# and assign the hostname to variable API_HOST\napi_host = os.getenv('API_HOST')\nif api_host == None:\n    print(\"Error: API hostname not found.\")\n    exit(1)\nelse:\n    API_HOST = api_host\n\n# Get the HTTP headers\nheaders = {'Authorization': 'Bearer %s' % API_TOKEN}\n\n# Get the URL for the API call\nurl = 'https://%s/api/v1/users/me/' % API_HOST\n\n# Make the API call\nresponse = requests.get(url, headers=headers)\n\n# Check to see if the response was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    response_data = json.loads(response.text)\n    user_id = response", "error": ""}
{"instruction": "Write a Python script that runs an infinite loop, catching exceptions and retrying after delay.", "input": "Perform a set of API or blockchain interactions in a try/except block and retry after 10 seconds if an exception occurs.", "generated": "import requests\nfrom requests.api import get\n\ntry:\n    response = requests.get(\n        \"https://prod-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\")\n    print(response.text)\nexcept Exception as e:\n    print(\"Error: \" + str(e))\n    print(\"Retrying in 10 seconds...\")\n    time.sleep(10)\n    response = requests.get(\n        \"https://prod-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\")\n    print(response.text)", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x73be893f5a30>: Failed to resolve 'prod-api.coinmarketcap.com' ([Errno -2] Name or service not known)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='prod-api.coinmarketcap.com', port=443): Max retries exceeded with url: /v1/cryptocurrency/listings/latest (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x73be893f5a30>: Failed to resolve 'prod-api.coinmarketcap.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmptpfd5jwm.py\", line 5, in <module>\n    response = requests.get(\n               ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='prod-api.coinmarketcap.com', port=443): Max retries exceeded with url: /v1/cryptocurrency/listings/latest (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x73be893f5a30>: Failed to resolve 'prod-api.coinmarketcap.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmptpfd5jwm.py\", line 11, in <module>\n    time.sleep(10)\n    ^^^^\nNameError: name 'time' is not defined. Did you forget to import 'time'?\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "\"\"\"\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json \nimport sys  \n\n\n\ndef login_api(email, password):\n    \"\"\"\n    Login Function\n    \"\"\"\n    login_url = \"https://api.github.com/auth/login\"\n    login_data = {\"email\": email, \"password\": password}\n    login_response = requests.post(login_url, json = login_data, headers = {\"Accept\": \"application/json\"})\n    login_response_json = login_response.json()\n    print(login_response_json)\n    print(type(login_response_json))\n    auth = HTTPBasicAuth(login_response_json['login'], login_response_json['password'])\n    return \"Login successful\"\n\n\ndef check_github_repo(repo):\n    \"\"\"\n    This function is used to check the github repository is accessible.\n    \"\"\"\n    print(repo)\n    check_url = \"https://api.github.com/repos/{}/{}/commits\".format(repo, repo)\n    check_response = requests.get(check_url, auth=auth, headers = {\"Accept\": \"application/json\"})\n    check_response_json = json.loads(check_response.text", "error": "  File \"/tmp/tmpmxyjv2r5.py\", line 11\n    Login Function\nIndentationError: unexpected indent\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\n\n\n# This is the main function that is run when we want to run the script\ndef main():\n    # This is the user id we will fetch from the API.\n\n    user_id = \"1234\"\n\n    # This is the API key we will use to fetch data from the API.\n    api_key = \"api-key-here\"\n\n    # Make the request\n    response = requests.get(\n        \"https://api.example.com/users/\" + user_id + \"/stats\",\n        headers={\n            \"Authorization\": \"Bearer \" + api_key\n        }\n    )\n\n    # Print the status code\n    print(response.status_code)\n\n    # Print the json response\n    print(response.json())\n\n    # Print the headers\n    print(response.headers)\n\n    # Print the headers\n    print(response.headers)\n\n    # Print the content\n    print(response.content)\n\n\n# The main function is run when the script is run directly\nif __name__ == \"__main__\":\n    main()", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x72a65a71b410>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users/1234/stats (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x72a65a71b410>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpjfwytg7a.py\", line 39, in <module>\n    main()\n  File \"/tmp/tmpjfwytg7a.py\", line 14, in main\n    response = requests.get(\n               ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users/1234/stats (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x72a65a71b410>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "\"\"\"\nimport requests\nimport json\nimport datetime\nimport sys\n\n# Defining the login function\ndef login(email,password):\n    url = \"https://example.com/api/login\"\n    auth = {\"email\": email,\"password\": password}\n    response = requests.post(url,json=auth)\n    print(response)\n\n\n# Defining the logout function\ndef logout():\n    url = \"https://example.com/api/logout\"\n    response = requests.post(url)\n    print(response)\n\n\n\n# Defining the get_session function\ndef get_session(email,password):\n    url = \"https://example.com/api/login\"\n    auth = {\"email\": email,\"password\": password}\n    response = requests.post(url,json=auth)\n    print(response)\n\n\n# Defining the get_user function\ndef get_user(email):\n    url = \"https://example.com/api/users\"\n    auth = {\"email\": email}\n    response = requests.get(url,json=auth)\n    print(response)\n\n\n# Defining the add_job function\ndef add_job(name,location,employee_id,description,start_date,end_date,is_active,skills):", "error": "  File \"/tmp/tmp9khp6u76.py\", line 1\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 40)\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\nfrom pprint import pprint\n\n# Fetching data from the api using requests\napi_key = 'c3a7cea26fcd9b5e098a99a7c0988b5'\nurl = 'https://api.example.com/users'\n\n# Retrieving the headers\nheaders = {\"X-API-Key\": api_key}\n\n# Making a GET request to the api\nresponse = requests.get(url, headers=headers)\n\n# Retrieving the data in the response\ndata = response.json()\n\n#print(data)\n\n# Fetching data in a dict\nuser_info = list(data.items())\n\npprint(user_info)\n\n# Fetching the name and age\nuser_data = data['name']\nuser_info = data['age']\nprint(user_data)\nprint(user_info)\n\n# Fetching the full name\nfull_name = data['name']\n\n# Fetching the full name\nfull_name = data['name']\n# Getting the first and last name\nfirst_name = full_name[0]\nlast_name = full_name[1]\n\n# Getting the first name\nfirst_name = full_name[0]\n# Getting the full name\nfull_", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x7d3e7db28050>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7d3e7db28050>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp1m_mz2vi.py\", line 12, in <module>\n    response = requests.get(url, headers=headers)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7d3e7db28050>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "import requests\n\n# Login to API\nres = requests.post('https://example.com/api/login', json={'email': 'jamal@gmail.com', 'pass': '123456'})\nprint(res.json())\n# print(res.content)\n\n# Create a new user\nres = requests.post('https://example.com/api/users/', json={'email': 'jamal@gmail.com', 'name': 'Jamal'})\n\n# Create a new movie\nres = requests.post('https://example.com/api/movies/', json={'title': 'The Big Man','release_date': '1990-01-01'})\n\n# Create a new episode\nres = requests.post('https://example.com/api/movies/', json={'title': 'The Big Man','release_date': '1991-11-01'})\n\n# Update a movie\nres = requests.put('https://example.com/api/movies/1', json={'title': 'The Big Man','release_date': '1991-11-01'})\n\n# Delete a movie\nres = requests.delete('https://example.com/api/movies/1')\n\n# Delete a user\nres = requests.delete('https://example.com", "error": "  File \"/tmp/tmpyz_cnckw.py\", line 24\n    res = requests.delete('https://example.com\n                          ^\nSyntaxError: unterminated string literal (detected at line 24)\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "\"\"\"\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nimport os\nimport base64\n\nos.system('clear')\n\n# STEP 1: Fetching the required data from the API\nAPI_URL = 'http://localhost:5000/api/login'\n\ndata = {}\n\n# STEP 2: Encode the data\n# data = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# STEP 3: Make a POST request\ndata = json.dumps(data)\n# print(data)\n\n# STEP 4: Parse the response\nresponse = requests.post(url=API_URL, auth=HTTPBasicAuth('jamal', '123456'), data=data)\n\n# STEP 5: Display the response\nprint(response.text)", "error": "  File \"/tmp/tmpcwdcq9l_.py\", line 1\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 27)\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\nimport json\nfrom pprint import pprint\n\nurl = \"https://api.example.com/users\"\n\nr = requests.get(url)\nprint(r.status_code)\nprint(r.headers)\nprint(r.text)\n\n# print(r.json())\n\n# # JSON format:\n# {\n#     \"login\": \"user\",\n#     \"email\": \"user@example.com\",\n#     \"first_name\": \"user\",\n#     \"last_name\": \"example\",\n#     \"password\": \"12345678\",\n#     \"created_at\": \"2016-10-10T13:42:30.000Z\",\n#     \"updated_at\": \"2016-10-10T13:42:30.000Z\",\n#     \"is_active\": true,\n#     \"is_superuser\": false\n# }\n\n\n# JSON format:\n# {\n#     \"login\": \"user\",\n#     \"email\": \"user@example.com\",\n#     \"first_name\": \"user\",\n#     \"last_name\": \"example\",\n#     \"password\": \"12345678\",\n#     \"created_at\": \"2016-10-10T13:42:30.000Z\",\n#     \"updated_", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x77c3694ee510>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x77c3694ee510>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp06lem1t7.py\", line 7, in <module>\n    r = requests.get(url)\n        ^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x77c3694ee510>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "def get_data(url):\n    response = requests.get(url)\n    return response.json()\n\n\ndef main():\n    url = \"https://example.com/api/login\"\n    response = get_data(url)\n    print(response)\n\n\nif __name__ == \"__main__\":\n    main()", "error": "Traceback (most recent call last):\n  File \"/tmp/tmp5z3za1bs.py\", line 13, in <module>\n    main()\n  File \"/tmp/tmp5z3za1bs.py\", line 8, in main\n    response = get_data(url)\n               ^^^^^^^^^^^^^\n  File \"/tmp/tmp5z3za1bs.py\", line 2, in get_data\n    response = requests.get(url)\n               ^^^^^^^^\nNameError: name 'requests' is not defined\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\nimport pprint\n\n# define a function to convert a dictionary to json format\ndef dict_to_json(dictionary):\n    return dictionary.to_json()\n\n\n# define a function to convert a json format to a dictionary\ndef json_to_dict(json_object):\n    return json_object.to_dict()\n\n# define a function to get the user data\ndef get_userinfo():\n    r = requests.get('https://api.example.com/users/2')\n    return r.json()\n\n# create a variable to test the user data\nuser_data = get_userinfo()\npprint.pprint(user_data)\n\n# convert the variable to json format\nuser_data_json = dict_to_json(user_data)\npprint.pprint(user_data_json)\n\n# convert the json format to a dictionary\nuser_data_dict = json_to_dict(user_data_json)\npprint.pprint(user_data_dict)\n\n# test the user data\nprint(user_data)\nprint(user_data_json)\nprint(user_data_dict)", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x7e1fb159e510>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users/2 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7e1fb159e510>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp096wu5gc.py\", line 19, in <module>\n    user_data = get_userinfo()\n                ^^^^^^^^^^^^^^\n  File \"/tmp/tmp096wu5gc.py\", line 15, in get_userinfo\n    r = requests.get('https://api.example.com/users/2')\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users/2 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7e1fb159e510>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "from urllib.request import urlopen, Request\nimport json\n\nurl = \"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=\"\n\nreq = Request(url + '1', headers={'Content-Type': 'application/json'})\n\nwith urlopen(req) as f:\n    data = f.read().decode(\"utf-8\")\n\nprint(json.dumps(json.loads(data), indent=4))", "error": "Traceback (most recent call last):\n  File \"/tmp/tmpldic65n_.py\", line 8, in <module>\n    with urlopen(req) as f:\n         ^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/urllib/request.py\", line 215, in urlopen\n    return opener.open(url, data, timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/urllib/request.py\", line 521, in open\n    response = meth(req, response)\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/urllib/request.py\", line 630, in http_response\n    response = self.parent.error(\n               ^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/urllib/request.py\", line 559, in error\n    return self._call_chain(*args)\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/urllib/request.py\", line 492, in _call_chain\n    result = func(*args)\n             ^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/urllib/request.py\", line 639, in http_error_default\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)\nurllib.error.HTTPError: HTTP Error 404: Not Found\n"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "generated": "import requests\nimport time\nimport os\nimport json\nimport sys\nimport requests.utils\n\nfrom collections import OrderedDict\nfrom.har import HAR\nfrom.utils import log_errors, send_request\n\n\nclass TokenSwap:\n    def __init__(self, har_file):\n        self.har = HAR(har_file)\n        self.swap_router_address = self.har.get_value('swap-router-address')\n        self.swap_router_address_api_key = self.har.get_value('swap-router-api-key')\n        self.swap_router_tokens = self.har.get_value('swap-router-tokens')\n        self.swap_router_tokens_api_key = self.har.get_value('swap-router-api-key')\n        self.swap_router_tokens_amounts = self.har.get_value('swap-router-tokens-amounts')\n        self.swap_router_tokens_dates = self.har.get_value('swap-router-tokens-dates')\n        self.swap_router_tokens_deadlines =", "error": "  File \"/tmp/tmp57qqcxol.py\", line 22\n    self.swap_router_tokens_deadlines =\n                                       ^\nSyntaxError: invalid syntax\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "\"\"\"\nimport requests\nimport json\nimport random\n\n# Defining the url\nurl = \"https://example.com/api/\"\n\n# Defining the headers\nheaders = {\"Content-Type\": \"application/json\"}\n\n# Taking the body\nbody = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Getting the response\nresponse = requests.post(url, headers=headers, data=body)\n\n# Displaying the response\nprint(response.text)\n\n# Getting the data type of the response\nprint(type(response.text))\n\n# Getting the response data\nprint(response.json())\n\n# Getting the response headers\nprint(response.headers)\n\n# Getting the response body\nprint(response.content)\n\n# Getting the response status code\nprint(response.status_code)\n\n# Getting the response headers\nprint(response.headers['Content-Type'])\n\n# Getting the response body\nprint(response.body)\n\n# Getting the response headers\nprint(response.headers['Access-Control-Allow-Origin'])\n\n# Getting the response headers\nprint(response.headers['Access-Control-Allow-Headers'])\n\n# Getting the response headers\nprint(response.headers['Access-Control-Allow-Methods'])\n\n# Getting the", "error": "  File \"/tmp/tmpprjfp275.py\", line 1\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 51)\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\nimport json\n\nurl = \"https://api.example.com/users\"\n\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\n# data = requests.get(url)\n\n\n# data = requests.post(url, data=json.dumps({'name':'Yuri'}))\n\n# print(data.text)\n\n# print(json.loads(data.text))\n\n# print(data.status_code)\n\ndata = requests.get(url, headers=headers)\n\n# print(data.text)\n\n# print(json.loads(data.text))\n\nprint(data.status_code)\nprint(data.content)\nprint(data.headers)\n\nprint(data.json())", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x71083be7bda0>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x71083be7bda0>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpf1xb7nka.py\", line 21, in <module>\n    data = requests.get(url, headers=headers)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='api.example.com', port=443): Max retries exceeded with url: /users (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x71083be7bda0>: Failed to resolve 'api.example.com' ([Errno -2] Name or service not known)\"))\n"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "generated": "# import requests\n#\n# r = requests.post('https://monand.har.zoom.us/auth/login', data={'username': 'jdoe', 'password': 'passw0rd'})\n# print(r.text)\n\nimport requests\nimport json\nimport time\n\nstart = time.time()\n\nr = requests.post('http://m.monand.us/system/auth/login', data={'username': 'jdoe', 'password': 'passw0rd'})\n\nprint(r.text)\n\n# with open('monand.txt') as file:\n#     data = file.read()\n#     file.close()\n#\n#     print(data)\n\nwith open('monand.har') as file:\n    data = file.read()\n\nwith open('monand.har', 'w') as file:\n    file.write(data)\n\nprint(time.time()-start)\n# print(type(json.loads(data)))\n# print(type(json.loads(data)[0]))\n# print(type(json.loads(data)[0]['token']))\n\nprint(json.loads(data))\n\nprint(len(json.loads(data)[0]))\n\nprint(len(json.", "error": "  File \"/tmp/tmp3gyp0wuo.py\", line 37\n    print(len(json.\n             ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "\"\"\"\nimport requests\nimport json\nimport sys\nimport time\n\ndef check_login(email, passwd):\n    url = \"https://example.com/api/login\"\n    headers = {\"Content-Type\": \"application/json\"}\n    body = {\n        \"email\": email,\n        \"pass\": passwd\n    }\n    r = requests.post(url, headers=headers, data=json.dumps(body))\n    data = json.loads(r.text)\n    if data[\"access_token\"] is not None:\n        return True\n    else:\n        return False\n\ndef main():\n    email = sys.argv[1]\n    passwd = sys.argv[2]\n    print(\"Checking if the user exists:\", email, \" pass:\", passwd)\n    if check_login(email, passwd):\n        print(\"Login Successful\")\n    else:\n        print(\"Login Failed\")\n\nif __name__ == \"__main__\":\n    main()", "error": "  File \"/tmp/tmpba25p9dz.py\", line 1\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 31)\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\n\n# Create a dictionary data\nuser_data = {\n    \"email\": \"vk.com\",\n    \"password\": \"password\",\n    \"name\": \"Vk\",\n    \"last_name\": \"Vk\",\n    \"gender\": \"M\",\n    \"date_of_birth\": \"1990-06-19\",\n    \"photo_url\": \"https://vk.com/photos/144860\",\n    \"sex\": 1,\n    \"city\": \"Varna\",\n    \"country\": \"Uganda\",\n    \"bdate\": \"1995-01-01\",\n}\n\n\ndef get_user_data():\n    # Create a Headers object\n    headers = {\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\"\n    }\n\n    # Create a requests object\n    user_data_request = requests.get(\n        \"https://api.example.com/users\",\n        headers=headers)\n\n    # If the request was successful, then print the response\n    if user_data_request.status_code == 200:\n        print(\"", "error": "  File \"/tmp/tmp49v6u0ep.py\", line 33\n    print(\"\n          ^\nSyntaxError: unterminated string literal (detected at line 33)\n"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "generated": "import requests\nimport json\nimport random\nimport base64\n\n\n# Defining a function to read a.har file\ndef read_harfile(path):\n    with open(path, 'r') as f:\n        content = f.read()\n    return content\n\n\n# Create an object for the data payload\npayload = {\n    \"amount\": 1000,\n    \"deadline\": \"2020-03-26T07:56:00\",\n    \"user\": {\n        \"address\": \"0x11a3a0f8a2fe1ced0beb6ab7f5a6d6f7c9a0a8e2e7b59c3f1e7cdc5f4c6cc\",\n        \"name\": \"Baron\",\n        \"wallet_address\": \"0xfceb7e74a1c7bc09cf8f2e6e9fda9ebf0b8e0d8a1e45e9ca8d8f4d3b4fcd\",\n        \"wallet_name\": \"Monad Network\",\n        \"wallet_address_alt\": \"0x11a3a0f8a2fe1ced0beb6ab7f5a6d6f7c9a0a8e2e7b59c", "error": "  File \"/tmp/tmplknqbvzz.py\", line 23\n    \"wallet_address_alt\": \"0x11a3a0f8a2fe1ced0beb6ab7f5a6d6f7c9a0a8e2e7b59c\n                          ^\nSyntaxError: unterminated string literal (detected at line 23)\n"}
{"instruction": "Create a Python script to automate swapping MON to USDT using the DZap platform on Monad network.", "input": "Use Web3.py and interact with https://app.dzap.io or its contract. Token MON is already approved. Loop through each wallet from wallets.txt, perform the swap, and repeat every 6 hours.", "generated": "import requests\nimport json\nimport time\nimport copy\nfrom urllib.parse import quote_plus\nimport sys\n\n# Get the token from the file\nimport logging\n\nfrom datetime import datetime, timedelta\nfrom datetime import datetime as dt\n\nnow = dt.now()\n\ndef _decode(s):\n    # Handle bytes input\n    if isinstance(s, bytes):\n        s = s.decode('utf-8')\n    return s\n\ndef _encode(s):\n    # Handle unicode input\n    if isinstance(s, str):\n        s = s.encode('utf-8')\n    return s\n\nclass Crypto_Swap:\n\n    def __init__(self, token, base_url, log_path, web3):\n        self.token = token\n        self.base_url = base_url\n        self.log_path = log_path\n        self.web3 = web3\n        self.loop_count = 0\n\n        self.logger = logging.getLogger(self.type)\n        self.logger.setLevel(logging.DEBUG)\n        if self.log_path:\n            self.logger.addHandler(logging.FileHandler(self.log_path))\n\n        self.logger.", "error": "  File \"/tmp/tmp7_e5jzgh.py\", line 42\n    self.logger.\n                ^\nSyntaxError: invalid syntax\n"}
{"instruction": "Create a script to check MON balance before swapping.", "input": "Before performing any swap action, ensure that the MON balance is sufficient. Skip the wallet if balance is below a minimum threshold.", "generated": "import requests\nimport json\nimport time\nimport logging\n\n# logging.basicConfig(level=logging.INFO)\n\n# This is the API we will be using\nAPI_KEY = 'b5f5b2e4ccf0d1b9e9adf0baa4d5f3e7a8b9a8c1bfc7c7e6d2d8c0c8c2f3e1d9c9b4e1d3a8c0a0a3b1c3898d9a7a6b9c'\n\n# Initialize the API and the url\napi_url = \"https://api.block.alpaca.markets/v2\"\n\n# Parameters for the GET request\nparams = {\"symbols\": \"AAPL,MSFT,AAPL,TSLA,GOOG,FB,XOM,FB,PFE,CSCO,DOW,YOY,XPE,DIS,CVS,CMCSA,TSLA,TWX,XOM,TOT,BCH,ADBE,ADP,AMAT,AMGN,APPC,ARCA,ARN,ATVI,AZURE,AVGO,AVGO,ATH,AVGO,AVGO,AVGO,AVGO,AVGO,AVGO", "error": "  File \"/tmp/tmpaivxtykk.py\", line 15\n    params = {\"symbols\": \"AAPL,MSFT,AAPL,TSLA,GOOG,FB,XOM,FB,PFE,CSCO,DOW,YOY,XPE,DIS,CVS,CMCSA,TSLA,TWX,XOM,TOT,BCH,ADBE,ADP,AMAT,AMGN,APPC,ARCA,ARN,ATVI,AZURE,AVGO,AVGO,ATH,AVGO,AVGO,AVGO,AVGO,AVGO,AVGO\n                         ^\nSyntaxError: unterminated string literal (detected at line 15)\n"}
{"instruction": "Generate a script to read private keys from a text file and derive wallet addresses.", "input": "Use wallets.txt as input, extract private keys, and use Web3.py to print corresponding wallet addresses on Monad testnet.", "generated": "import json\nimport requests\nimport secrets\n\n# Get a private key from file\nwith open('private_keys.txt') as f:\n    priv_key = f.read()\n\n# Private key\npriv_key = priv_key.split()[0]\npriv_key = priv_key.lstrip('0x')\npriv_key = priv_key.lstrip('-')\npriv_key = priv_key.lstrip('[')\npriv_key = priv_key.lstrip(']')\npriv_key = priv_key.lstrip('{')\npriv_key = priv_key.lstrip('}')\n\n# Get public key from file\nwith open('public_keys.txt') as f:\n    pub_key = f.read()\n\n# Public key\npub_key = pub_key.split()[0]\npub_key = pub_key.lstrip('0x')\npub_key = pub_key.lstrip('-')\npub_key = pub_key.lstrip('[')\npub_key = pub_key.lstrip(']')\npub_key = pub_key.lstrip('{')\npub_key = pub_key.lstrip('}')\n\n# Get wallet from file\nwith open('wallets.txt') as f:", "error": "  File \"/tmp/tmpn1lz0lsc.py\", line 32\n    with open('wallets.txt') as f:\nIndentationError: expected an indented block after 'with' statement on line 32\n"}
{"instruction": "Write a Python script to run the entire MON swap routine in a loop with 6-hour delay.", "input": "Wrap the swap process in a while True loop, include try/except handling, and use time.sleep(21600) to wait between cycles.", "generated": "import requests\nfrom bs4 import BeautifulSoup\nimport time\nimport datetime\n\nMON = int(input('What is the time to get the swaps in days? '))\n\n# Create an empty array\nswaps = []\n\n# Get the page source\npage = requests.get('https://www.mon.com/swap-games/swap-games/swaps?id=')\n\n# Parse the page source\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find the first swap\nswap_list = soup.find('div', class_='list_item')\n\n# Get the current time for the time stamp\ncurrent_time = datetime.datetime.now()\n\n# Get the time\ntime_stamp = current_time.strftime('%H:%M:%S')\n\n# Loop through the swap list to find each swap\nfor item in swap_list.find_all('div', class_='list_item'):\n    # Get the link\n    link = item.a.get('href')\n\n    # Create an empty array\n    swaps.append(str(link))\n\n# Get the time\ntime.sleep(3600)\n\n# Loop through the swaps\nfor item in swaps:\n    # Get the page source\n    page", "error": "Script execution timed out."}
{"instruction": "Create a Python script to log each transaction hash after a swap.", "input": "After each swap, print or save the transaction hash for tracking purposes.", "generated": "import requests\nfrom requests.auth import HTTPBasicAuth\nfrom requests.sessions import Session\nimport sys\nimport json\n\n# Step - 1: Define the basic HTTP headers.\n# Note: Replace the user name and password with your API username and password.\napi_key = \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\napi_url = \"https://sandbox.safebox.com/api/\"\n\n# Step - 2: Define a new session.\nsession = Session()\nsession.headers = {'X-API-KEY': api_key}\n\n# Step - 3: Create a GET request to the API endpoint.\nresp = session.get(api_url+\"transactions\")\n\n# Step - 4: Parse the response.\ntransactions = resp.json()\n\n# Step - 5: Print the keys of the API response.\nfor x in transactions:\n    print(x)\n\n# Step - 6: Write the transaction hashes to a file.\nwith open('transactions.txt', 'w') as outfile:\n    outfile.write(''.join(transactions))\n\n# Step - 7: Close the session.\nsession.close()", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 60, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/socket.py\", line 963, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsocket.gaierror: [Errno -3] Temporary failure in name resolution\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 488, in _make_request\n    raise new_e\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 464, in _make_request\n    self._validate_conn(conn)\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 1093, in _validate_conn\n    conn.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 704, in connect\n    self.sock = sock = self._new_conn()\n                       ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 205, in _new_conn\n    raise NameResolutionError(self.host, self, e) from e\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x7471c1c16210>: Failed to resolve 'sandbox.safebox.com' ([Errno -3] Temporary failure in name resolution)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='sandbox.safebox.com', port=443): Max retries exceeded with url: /api/transactions (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7471c1c16210>: Failed to resolve 'sandbox.safebox.com' ([Errno -3] Temporary failure in name resolution)\"))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpokz7lig2.py\", line 17, in <module>\n    resp = session.get(api_url+\"transactions\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 602, in get\n    return self.request(\"GET\", url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='sandbox.safebox.com', port=443): Max retries exceeded with url: /api/transactions (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7471c1c16210>: Failed to resolve 'sandbox.safebox.com' ([Errno -3] Temporary failure in name resolution)\"))\n"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "generated": "import requests\n\nclass Transaction:\n    # class is a wrapper to the requests module\n    # request method returns a response from a server\n\n    def __init__(self, request_url, response_url):\n        self.request_url = request_url\n        self.response_url = response_url\n        \n    def process_request(self):\n        response = requests.get(self.request_url)\n        print(response.content)\n        return response\n\n    def process_response(self):\n        response = self.process_request()\n        self.response = response\n        return response\n\nclass SwapTokens(Transaction):\n    def __init__(self, request_url, response_url):\n        Transaction.__init__(self, request_url, response_url)\n        self.swap_url = self.request_url\n        self.swap_amount = self.response.json()[\"amount\"]\n\n    def process_request(self):\n        response = requests.get(self.swap_url)\n        return response\n\n    def process_response(self):\n        response = self.process_request()\n        self.swap_response = response\n        return response\n\nclass SwapTokensWithMon(SwapTokens):\n    def __init__(self, request_url, response_url", "error": "  File \"/tmp/tmpakoo4w_n.py\", line 37\n    def __init__(self, request_url, response_url\n                ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Write a Python script that reads private keys from a file and prints the wallet balances in MON using Web3.py.", "input": "Use wallets.txt file as source of private keys. Connect to https://testnet-rpc.monad.xyz and print balance in Ether for each address.", "generated": "import requests\nimport json\nimport os\nimport base64\nfrom urllib.parse import urlparse\nimport time\nimport re\n\n# Step 1: Get the key\nurl = 'https://testnet-rpc.monad.xyz/'\nresponse = requests.get(url)\nresponse.raise_for_status()\n\n# Step 2: Decrypt the key\nkey = response.text\npriv_key = base64.b64decode(key)\npriv_key = priv_key.decode('utf-8')\nprint(priv_key)\n\n# Step 3: Get the json data\ndata = response.text\ndata_json = json.loads(data)\n\n# Step 4: Get the Private keys\nprivate_keys = data_json['privateKeys']\n\n# Step 5: Get the balances\nbalances = data_json['balances']\n\n# Step 6: Map the private keys to the addresses\naddresses = {}\nfor i in range(len(private_keys)):\n    addresses[private_keys[i]['address']] = private_keys[i]['balance']\n\n# Step 7: Map the balances to the addresses\nbalances_maps = {}\nfor j in range(len(balances)):\n    addresses_maps = {}\n    for k in range(", "error": "  File \"/tmp/tmp0smqfjoa.py\", line 39\n    for k in range(\n                  ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "#!/bin/python3\nimport requests\nimport json\nimport traceback\n\n# Request headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Request body\nbody = json.dumps({\n    \"email\": \"jamal@gmail.com\",\n    \"pass\": \"123456\"\n})\n\n# Request url\nurl = \"https://example.com/api/login\"\n\n# Make the request\nresponse = requests.request(\"POST\", url, headers=headers, data=body, verify=False)\n\nprint(response.text)\nprint(response.status_code)\nprint(response.headers)\nprint(response.request.url)\nprint(response.request.headers)\nprint(json.dumps(response.request.body, indent=4))\nprint(response.request.body)\nprint(response.request.headers)\nprint(response.request.body.decode(\"utf-8\"))\nprint(response.request.headers.get(\"Content-Type\"))\nprint(response.request.body.decode(\"utf-8\"))\nprint(response.request.headers.get(\"Content-Type\"))\nprint(response.request.body.decode(\"utf-8\"))\nprint(response.request.headers.get(\"Content-Type\"))\nprint(json", "error": "  File \"/tmp/tmpg9rsm11d.py\", line 37\n    print(json\n         ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "\"\"\"\nimport requests\nfrom requests.auth import AuthBase\nfrom requests.auth import HTTPBasicAuth\nimport json\nimport csv\nfrom collections import OrderedDict\nimport time\n\nclass MyAuth(HTTPBasicAuth):\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    def get_username_password(self):\n        return self.username, self.password\n\ndef log_in(email, passd):\n    res = requests.post(\"https://example.com/api/login\", json={\"email\": email, \"pass\": passd})\n    return res\n\ndef create_entry(name, email):\n    res = requests.get(\n        \"https://example.com/api/users/\",\n        headers={\"Authorization\": f\"Basic {name}:\"+passd}\n    )\n    return res\n\ndef update_entry(name, email, passd):\n    #res = requests.put(\n    #    \"https://example.com/api/users/\",\n    #    headers={\"Authorization\": f\"Basic {name}:\"+passd},\n    #    json={\"name\": \"Yassine\", \"email\": \"r1@gmail.com\"}\n    #)\n    #return res", "error": "  File \"/tmp/tmpeshnc0fw.py\", line 1\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 34)\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "import requests\nimport json\nimport sys\nimport os\nfrom datetime import datetime as dt\n\n# Get the API key\nAPI_KEY = os.environ['API_KEY']\n\n# Get the user data\ndef get_user_data():\n    url = \"https://api.example.com/users\"\n    response = requests.get(url, headers={\"Authorization\": \"Bearer %s\" % API_KEY})\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return \"Error getting data\"\n\n# Print user data\ndef print_user_data():\n    user_data = get_user_data()\n    print(\"\\nUser data:\\n\")\n    for key, value in user_data['data'].items():\n        print(\"%s: %s\" % (key, value))\n\n# Get the email address from the user data\ndef get_email_address():\n    user_data = get_user_data()\n    email_address = input(\"\\nEnter the email address: \")\n    if email_address in user_data['data']:\n        return email_address\n    else:\n        print(\"\\nError: The email address entered is invalid. Please try again.\\n\")\n        return get_email_", "error": "Traceback (most recent call last):\n  File \"/tmp/tmp705i8slk.py\", line 8, in <module>\n    API_KEY = os.environ['API_KEY']\n              ~~~~~~~~~~^^^^^^^^^^^\n  File \"<frozen os>\", line 685, in __getitem__\nKeyError: 'API_KEY'\n"}
{"instruction": "Write a Python script to swap MON to multiple tokens (WSOL, DAK, ETH, YAKI, CHOG) and swap back half to MON.", "input": "Using each wallet from wallets.txt, swap MON to each token listed above, then take 50% of each and swap it back to MON. Wait 6 hours before repeating the process.", "generated": "import requests\nimport time\nimport json\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom random import randint\n\nmon = \"WELLSTATEDROP\"\n\n# Get wallet info\nwith open(\"wallet_list.txt\") as file:\n    wallet_list = file.read().split(\"\\n\")\n\nfor wallet in wallet_list:\n    if wallet.find(mon)!= -1:\n        print(\"Mon account found!\")\n        print(\"Current wallet account: \", wallet)\n        break\n    else:\n        print(\"Mon account not found!\")\n\n# get wallet info\nwith open(\"wallet_list.txt\") as file:\n    wallet_list = file.read().split(\"\\n\")\n\n# Get list of wallets in wallet_list\nfor wallet in wallet_list:\n    if wallet.find(mon)!= -1:\n        print(\"Mon account found!\")\n        print(\"Current wallet account: \", wallet)\n        break\n    else:\n        print(\"Mon account not found!\")\n\n# Get list of wallets in wallet_list\nwith open(\"wallet_list.txt\") as file:\n    wallet_list = file.read().split(\"\\n\")\n\n\n# define all wallet info\nall_data = {}\n\nfor wallet in wallet_list:", "error": "  File \"/tmp/tmp36ah_kdl.py\", line 43\n    for wallet in wallet_list:\nIndentationError: expected an indented block after 'for' statement on line 43\n"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "generated": "import requests\nimport json\nimport time\nimport os\nimport urllib3\nimport web3\nimport urllib\n\n# Set up Web3\nw3 = web3.Web3(web3.HTTPProvider('http://w3chvc.chvc.monad.xyz:8545'))\n# w3 = web3.Web3(web3.HTTPProvider('http://localhost:8545'))\n\n# Set up HTTP headers\nheaders = {'content-type': 'application/json'}\n\n# Set up global variables\n# Monad\nMONAD_TOKEN = os.getenv('MONAD_TOKEN', '0x8a9cdbb4f5c4ea5a6b7e1a3cbafd6c9f6da6b1a3a16d6a3a1e1c06d3e0ab9c')\nMONAD_TOKEN_PRIVATE = os.getenv('MONAD_TOKEN_PRIVATE', '')\n# Monad\nMONAD_TOKEN_PRIVATE_SECRET = os.getenv('MONAD_TOKEN_PRIVATE_SECRET', 'F9D5A8F3E7A1A8A7A6B7E68A3F7F5E61D", "error": "  File \"/tmp/tmpdjls3g_n.py\", line 21\n    MONAD_TOKEN_PRIVATE_SECRET = os.getenv('MONAD_TOKEN_PRIVATE_SECRET', 'F9D5A8F3E7A1A8A7A6B7E68A3F7F5E61D\n                                                                         ^\nSyntaxError: unterminated string literal (detected at line 21)\n"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "generated": "\"\"\"\nimport urllib3\nimport json\nimport logging\nimport requests\n\nlogging.basicConfig(level=logging.INFO)\nurllib3.disable_warnings()\n\ndef main():\n    # 1. Create a URL\n    url = \"http://httpbin.org/post\"\n    # 2. Create a Header\n    header = {'Content-Type': 'application/json'}\n    # 3. Body\n    body = '{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}'\n    # 4. Make HTTP POST\n    response = requests.post(url, headers=header, data=body)\n    # 5. Print HTTP Response\n    logging.info('Response code:'+ str(response.status_code))\n    logging.info('Response text:'+ str(response.text))\n\nif __name__ == \"__main__\":\n    main()", "error": "  File \"/tmp/tmp96d8bq5k.py\", line 1\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 24)\n"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "generated": "# Importing the libraries\nimport requests\nimport json\nimport time\nimport datetime\nimport random\nfrom datetime import date\n\n# Functions\n\n# Function to check if the user is already logged in\ndef is_logged_in():\n    # If we receive a 405, status code means the user has been deleted or has been logged out.\n    # This is an indication that an account is being used and we need to log them out.\n    auth_status = requests.get(\"https://monadnet.herokuapp.com/login/status\", headers={\"Content-Type\": \"application/json\"}).status_code\n    if auth_status == 405:\n        return False\n    else:\n        return True\n\n# Function to get the data from the HAR file\ndef get_data():\n    file = open(\"/home/pi/Desktop/MonadNetwork/token_swaps.har\", \"r\")\n    har_file = file.read()\n    file.close()\n    return json.loads(har_file)\n\n# Function to get the token from the HAR file\ndef get_token():\n    file = open(\"/home/pi/Desktop/MonadNetwork/token.har\", \"r\")\n    har_file = file.read()\n    file.close()\n    return json.loads(har_", "error": "  File \"/tmp/tmptrvua5kd.py\", line 33\n    return json.loads(har_\n                     ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Create a script to check MON balance before swapping.", "input": "Before performing any swap action, ensure that the MON balance is sufficient. Skip the wallet if balance is below a minimum threshold.", "generated": "import requests\nimport json\nimport time\nimport random\nfrom requests.auth import HTTPBasicAuth\n\n# Initial balance of the user\nbalance = 0\n\n# Function to perform a swap action\ndef perform_swap(account_1, account_2):\n    # Check if the accounts are the same\n    if account_1 == account_2:\n        return False\n    elif account_1 == 'BTC' and account_2 == 'ETH':\n        return True\n    else:\n        if account_1 == 'ETH' and account_2 == 'BTC':\n            return True\n        elif account_1 == 'BTC' and account_2 == 'ETH':\n            return True\n        elif account_1 == 'ETH' and account_2 == 'USDT':\n            return True\n        elif account_1 == 'BTC' and account_2 == 'USDT':\n            return True\n        elif account_1 == 'USDT' and account_2 == 'BTC':\n            return True\n        else:\n            return False\n\n# Function to request the balance of the user\ndef get_mon_balance(account):\n    url = \"https://api.binance.com/api/v3/ticker/price?symbol=\" + account\n    response = json.loads(requests.get(url).content", "error": "  File \"/tmp/tmppaxlmo4t.py\", line 34\n    response = json.loads(requests.get(url).content\n                         ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "generated": "#!/usr/bin/env python\n\n# Import requests module\nimport requests\n# Import sleep module\nimport time\n\n# Declare variables\nuser_login = input(\"Enter the username to log in: \")\npassword = input(\"Enter the password: \")\n\n# Test the user login\nprint(\"Login Success!\")\n\n# Create a GET request to the API\nuser_login_url = f\"https://api.example.com/users/login\"\nresponse = requests.get(user_login_url)\nprint(\"Status Code: {}\".format(response.status_code))\n\n# Check the Status Code\nif response.status_code == 200:\n  # Extract the user information\n  user_response = response.json()\n  print(\"User information: {}\".format(user_response))\n  print(\"User Username: {}\".format(user_response[\"username\"]))\n  print(\"User Password: {}\".format(user_response[\"password\"]))\nelse:\n  print(\"Error: {}\".format(response.status_code))\n\n# Create a POST request to the API to create a new user\nuser_create_url = f\"https://api.example.com/users\"\nresponse = requests.post(user_create_url, data = {\n    \"username\": user_login,\n    \"password", "error": "  File \"/tmp/tmpfhepjtpr.py\", line 34\n    \"password\n    ^\nSyntaxError: unterminated string literal (detected at line 34)\n"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "generated": "# Importing and validating libraries\nimport requests\nimport re\nimport json\nimport time\nimport threading\nimport json\nfrom web3 import Web3, HTTPProvider\nfrom web3.middleware import geth_poa_middleware\n\n# Defining a variable to keep the count of times that a token has been swapped\ntokenSwappedCounter = 0\n\n# Defining a variable to keep the count of times that the Monad network has been swapped with a token\nmonadSwappedCounter = 0\n\n# Defining an account object for Monad\nmonad = Web3(HTTPProvider(\"http://api.monadnet.infura.io/v3/a3a00d1b8b7ddb2c8d0fafd6dd9c2ee9\"))\n\n# Defining a function to get the token information from Monad\ndef getTokenFromMonad(address):\n    global monad\n    token_details = monad.eth.get_balance(address)\n    token_info = token_details['value']\n    return token_info\n\n# Defining a function to get the token information from Monad\ndef getTokenFromWallets(address, user_wallet_info):\n    global monad\n    global monad_wallets\n    global monad_wallets_info\n    global token_", "error": "Traceback (most recent call last):\n  File \"/tmp/tmpm1rsepgx.py\", line 8, in <module>\n    from web3 import Web3, HTTPProvider\nModuleNotFoundError: No module named 'web3'\n"}
{"instruction": "Write a Python script to run the entire MON swap routine in a loop with 6-hour delay.", "input": "Wrap the swap process in a while True loop, include try/except handling, and use time.sleep(21600) to wait between cycles.", "generated": "from requests import post\nimport time\n\n# Get the response from the server\nurl = \"http://localhost\"\nr = post(url)\n# time.sleep(21600)\nprint(r.text)", "error": "Traceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 198, in _new_conn\n    sock = connection.create_connection(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 85, in create_connection\n    raise err\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/connection.py\", line 73, in create_connection\n    sock.connect(sa)\nConnectionRefusedError: [Errno 111] Connection refused\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 493, in _make_request\n    conn.request(\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 445, in request\n    self.endheaders()\n  File \"/usr/local/python/3.12.1/lib/python3.12/http/client.py\", line 1322, in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\n  File \"/usr/local/python/3.12.1/lib/python3.12/http/client.py\", line 1081, in _send_output\n    self.send(msg)\n  File \"/usr/local/python/3.12.1/lib/python3.12/http/client.py\", line 1025, in send\n    self.connect()\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 276, in connect\n    self.sock = self._new_conn()\n                ^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connection.py\", line 213, in _new_conn\n    raise NewConnectionError(\nurllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x781f7c52cd70>: Failed to establish a new connection: [Errno 111] Connection refused\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x781f7c52cd70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpdos97gdt.py\", line 6, in <module>\n    r = post(url)\n        ^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/codespace/.local/lib/python3.12/site-packages/requests/adapters.py\", line 700, in send\n    raise ConnectionError(e, request=request)\nrequests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x781f7c52cd70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "generated": "# Import modules\nimport sys\nfrom datetime import datetime\n\n# Check if the user has entered a correct value for MON, it is converted to int for comparison.\n# If it is not convert the input to int.\ntry:\n    MON = int(input(\"What is the amount to swap Mon: \"))\nexcept ValueError:\n    print(\"Invalid input. Please try again.\")\n    sys.exit()\n\n# Check if the user has entered a correct value for SWAP_TOTAL, it is converted to int for comparison.\n# If it is not convert the input to int.\ntry:\n    SWAP_TOTAL = int(input(\"How many tokens to check out every MON: \"))\nexcept ValueError:\n    print(\"Invalid input. Please try again.\")\n    sys.exit()\n\n# Check if the user has entered a correct value for SWAP_CONSUMER, it is converted to int for comparison.\n# If it is not convert the input to int.\ntry:\n    SWAP_CONSUMER = int(input(\"How many tokens to buy every MON: \"))\nexcept ValueError:\n    print(\"Invalid input. Please try again.\")\n    sys.exit()\n\n# Check if the user has entered a correct value for SWAP_ADDER, it is converted to int for comparison.\n# If it", "error": "Script execution timed out."}
{"instruction": "Create a Python automation script to register accounts using a referral link.", "input": "Open https://id.offlineprotocol.com?referral=GQVTKS, fill the registration form with random email, username, and password, then complete the email verification step if possible.", "generated": "import requests\nimport json\nimport time\nimport random\n\n\n# Get random referral link\ndef get_referral_link():\n    url = \"https://id.offlineprotocol.com/referral?referral=GQVTKS\"\n    # Opening the JSON file\n    with open(\"referral_link.json\", \"r\", encoding=\"utf-8-sig\") as f:\n        data = json.load(f)\n    # Selecting the referral link based on the random number\n    if random.randint(0, 1) == 0:\n        r = requests.get(url)\n        referral_link = r.json()['registration_link']\n    else:\n        referral_link = \"https://accounts.google.com/o/oauth2/auth?client_id=id.offlineprotocol.com&scope=https://www.googleapis.com/auth/userinfo.profile&redirect_uri=https://example.com/callback&response_type=code&state=eyJpZCI6IjEiLCJhIjoiY2FkY29tZSI6ImNLTU4LjEwMDEwOCIsImlhd3R1cmVzIjogInVjZXNza", "error": "  File \"/tmp/tmpflguaumw.py\", line 18\n    referral_link = \"https://accounts.google.com/o/oauth2/auth?client_id=id.offlineprotocol.com&scope=https://www.googleapis.com/auth/userinfo.profile&redirect_uri=https://example.com/callback&response_type=code&state=eyJpZCI6IjEiLCJhIjoiY2FkY29tZSI6ImNLTU4LjEwMDEwOCIsImlhd3R1cmVzIjogInVjZXNza\n                    ^\nSyntaxError: unterminated string literal (detected at line 18)\n"}
{"instruction": "Generate a Python script that automates web interaction based on HAR file export.", "input": "Use browser automation tools such as Selenium or Playwright to simulate user registration steps recorded in the HAR file, including HTTP headers and payloads.", "generated": "import requests\nimport time\nimport os\nimport json\nimport re\nimport pprint\n\nimport random\nimport string\nimport time\nfrom datetime import datetime\n\n# Get URL\nurl = \"https://api.hunter.io/v2/email-validation\"\n\n# Get headers\nheaders = {\n    'Authorization': 'Bearer'+ os.environ.get('HUNTER_TOKEN')\n}\n\n# Get payload\npayload = {\n    'email': 'test_@completo.com',\n    'password': 'Qwert12345678'\n}\n\n# Generate random string\ndef generate_random_string():\n    random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(8))\n    return random_string\n\n# Get data from HAR file\ndef get_har_data(url):\n    response = requests.get(url, headers=headers, params=payload)\n    print(response.text)\n    print(response.status_code)\n\n    return response.text\n\n# Generate HAR file\ndef generate_har_file(har_file_path):\n    with open(har_file_path, 'w') as f:\n        f.write(get_har", "error": "  File \"/tmp/tmp75tpbf47.py\", line 43\n    f.write(get_har\n           ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Create a script to simulate multiple registrations via referral link.", "input": "Read multiple fake user profiles (e.g., from a JSON or CSV), and register them through the referral link to increase referral count automatically.", "generated": "import requests\nimport json\nimport time\nfrom requests.auth import HTTPBasicAuth\nimport csv\nimport os\n\nusername = \"admin\"\npassword = \"password\"\n\n# Generate referral link to increase referral count\ndef referral(referral_link):\n    # Generate referral link with username and password\n    ref_link = referral_link + \"?username=\" + username + \"&password=\" + password\n\n    # Request referral link to increase referral count\n    r = requests.get(ref_link)\n\n    # Check status code\n    if r.status_code == 200:\n        return True\n    else:\n        return False\n\n# Load user profiles into a list\nwith open(\"users.csv\") as csvfile:\n    reader = csv.reader(csvfile, delimiter=\",\")\n    next(reader, None)\n    data = []\n    for row in reader:\n        data.append(row)\n\n# Load user profiles into a dictionary\nuser_list = dict()\nfor i in range(len(data)):\n    user_list[data[i][0]] = data[i][1]\n\n# Make fake referral links to increase referral count\nfor user_name, referral_link in user_list.items():\n    if referral(referral_link):\n        print(user", "error": "  File \"/tmp/tmpacxjqpeo.py\", line 41\n    print(user\n         ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Create a Python script to simulate user registration from a HAR file.", "input": "The HAR file captures a POST request to https://id.offlineprotocol.com/api/auth/signup. The body includes JSON with email, password, and username. Headers include content-type application/json.", "generated": "import requests\nimport json\nimport time\nimport datetime\nimport pprint\n\n# User details\nemail = 'your@email@example.com'\npassword = 'your@password'\nusername = 'your@username'\n\n# API Call Parameters\nparams = {\n    \"email\": email,\n    \"password\": password,\n    \"username\": username\n}\n\n# Request header\nheaders = {\n    \"content-type\": \"application/json\"\n}\n\n# API Call URL\nurl = \"https://id.offlineprotocol.com/api/auth/signup\"\n\n# Request body\nbody = json.dumps(params)\n\n# Perform POST request\nresponse = requests.post(url, headers=headers, data=body)\n\n# Check status code\nprint(response.status_code)\n\n# Check response content\n#print(response.content)\n\n# Parse response\ndata = response.json()\n\n# Check response object\nprint(data)\n\n# Check response data\nprint(data['data'])\n\n# Parse response data\nprint(data['data']['email'])\n\n# Check authentication token\nprint(data['data']['auth_token'])\n\n# Check authentication token\nprint(data['data']['auth_token']['expires", "error": "  File \"/tmp/tmpnkdf0s0q.py\", line 55\n    print(data['data']['auth_token']['expires\n                                     ^\nSyntaxError: unterminated string literal (detected at line 55)\n"}
{"instruction": "Write Python code to replay an API signup request using data extracted from HAR.", "input": "Based on HAR data, send a POST request to /api/register with a JSON payload: email, password, username. Include necessary headers (content-type, user-agent).", "generated": "import requests\nimport json\nimport time\nimport os\n\n\nclass HarAPI():\n    def __init__(self, user, pwd, email, pwd_file=None):\n        self.user = user\n        self.pwd = pwd\n        self.email = email\n        self.pwd_file = pwd_file\n        self.url = 'http://127.0.0.1:5000/api/register?email={}&password={}&username={}&password_file={}'\n        self.login_url = 'http://127.0.0.1:5000/api/login'\n        self.register_url = 'http://127.0.0.1:5000/api/register'\n        self.user_url = 'http://127.0.0.1:5000/api/users'\n        self.add_userurl = 'http://127.0.0.1:5000/api/users/add'\n        self.change_passwordurl = 'http://127.0.0.1:5000/api/users/change_password'\n        self.logouturl = 'http://127.0.0.1:5000/api/logout'\n\n    def create_pwd(self):\n        payload = {'email': self.email,", "error": "  File \"/tmp/tmpl98m3ht4.py\", line 22\n    payload = {'email': self.email,\n              ^\nSyntaxError: '{' was never closed\n"}
{"instruction": "Create a Python script using requests to simulate referral registration from a HAR file.", "input": "The referral link is https://id.offlineprotocol.com?referral=GQVTKS. After accessing the page, a signup form is submitted to /api/auth/signup with JSON body: email, password, username.", "generated": "# Import library\nimport requests\nimport json\nimport configparser\nimport os\nimport time\n\n# Get config variables\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')\n\n# Get API key\napi_key = config['AUTH']['API_KEY']\n\n# Get HAR file\nhar_file = config['HAR']['HAR_FILE']\n\n# Get username and password\nusername = config['HAR']['USERNAME']\npassword = config['HAR']['PASSWORD']\n\nbase_url = \"https://id.offlineprotocol.com\"\n\n# User agent\nuser_agent = 'Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]'\n\n# Get file\nuser_agent_file = open(\"./user_agent.txt\", \"r\")\nuser_agent_file_text = user_agent_file.read()\nuser_agent_file_text", "error": "Traceback (most recent call last):\n  File \"/tmp/tmpzcdm2ys6.py\", line 13, in <module>\n    api_key = config['AUTH']['API_KEY']\n              ~~~~~~^^^^^^^^\n  File \"/usr/local/python/3.12.1/lib/python3.12/configparser.py\", line 941, in __getitem__\n    raise KeyError(key)\nKeyError: 'AUTH'\n"}
{"instruction": "Write a script that converts POST request data from HAR into Python requests code.", "input": "The HAR shows a POST request to a signup endpoint, with JSON payload and standard headers. Reconstruct the full request in Python using requests module.", "generated": "import requests\nimport json\nimport urllib.parse\nfrom py2neo import Graph, Node, Relationship\nfrom py2neo.specialty import Specialty\nimport random\n\n\ngraph = Graph('http://localhost:7474', username='neo4j', password='password')\n\n# Define a helper function to generate a random integer\ndef create_random_id(length):\n    return int(random.random()*(10**length))\n\n# Define a helper function to create a random URI\ndef create_random_uri(length):\n    return urllib.parse.quote(random.choice(string.ascii_letters) + ''.join(random.choice(string.digits) for i in range(length)))\n\n# Define a helper function to get the current date and time\ndef get_date_time():\n    date_time = str(random.randint(1,99999999999999999))\n    return date_time\n\n# Define a helper function to create a random name\ndef create_random_name(length):\n    return \"\".join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n\n# Define a helper function to create a random email\ndef create_random_email(length):\n    return \"", "error": "  File \"/tmp/tmp8kky2ous.py\", line 30\n    return \"\n           ^\nSyntaxError: unterminated string literal (detected at line 30)\n"}
{"instruction": "Create automation script based on HAR to simulate user interaction and capture response.", "input": "Using captured HAR request to an airdrop registration API, construct the request in Python and log the response status and body.", "generated": "import requests\nimport json\nimport sys\nimport os\nimport hashlib\nimport datetime\nimport time\nfrom collections import Counter\n\n# function to generate the SHA1 hash of all the input files\ndef sha1(file):\n    sha1_hash = hashlib.sha1()\n    with open(file, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            sha1_hash.update(chunk)\n    return sha1_hash.hexdigest()\n\n# function to validate the SHA1 hash of all the input files\ndef sha1_validation(file):\n    sha1_hash = hashlib.sha1()\n    with open(file, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            sha1_hash.update(chunk)\n    return sha1_hash.hexdigest() == \"0b6c4e0ef9a9f26d0c3ef2a5e0c98a9aec0e1b9d8f0c0b5b08b8d3e6c6\"\n\n# function to generate a list of all the ids of the registration of the registered users\ndef ids(user_ids", "error": "  File \"/tmp/tmppalmremt.py\", line 27\n    def ids(user_ids\n           ^\nSyntaxError: '(' was never closed\n"}
{"instruction": "Generate automation from HAR recording including custom headers.", "input": "POST request captured in HAR includes authorization and content-type headers. Reproduce the same request in Python using the requests module.", "generated": "import requests\nimport urllib.parse\nimport json\nimport os\n\n\n# Authorization header\nauth_header = \"Authorization: Bearer \"\n\n# Request headers\nheaders = {\n  \"Content-Type\": \"application/json\",\n  \"Accept\": \"application/json\"\n}\n\n# Get all the info from HAR\ndef get_info_from_har(url):\n  resp = requests.get(url, headers=headers)\n  if resp.status_code!= 200:\n    raise Exception(f'Request failed with status code {resp.status_code}')\n\n  data = resp.json()\n  return data\n\n# get the access token\ndef auth_token():\n  data = get_info_from_har(\"https://api.github.com/user\")\n  # check if token exists\n  if not os.path.exists(os.getcwd()+'/data/'+data['login']):\n    raise Exception('Not found token file')\n\n  with open(os.getcwd()+'/data/'+data['login'],'r') as file:\n    token = file.readlines()[0]\n  return token\n\n# get the content-type header\ndef auth_headers():\n  data = get_info_from_har(\"https://api.github.", "error": "  File \"/tmp/tmp917gck8v.py\", line 38\n    data = get_info_from_har(\"https://api.github.\n                             ^\nSyntaxError: unterminated string literal (detected at line 38)\n"}
{"instruction": "Generate automation from HAR recording including custom headers.", "input": "POST request captured in HAR includes authorization and content-type headers. Reproduce the same request in Python using the requests module.", "generated": "import requests\n\n# API key\nAPI_KEY = \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n\n# Create a request instance\nrequests.post('https://api.jianshu.com/predict/predict',\n              json={'model': 'predict_logistic'},\n              headers={'Authorization': 'token {}'.format(API_KEY),\n                      'Content-Type': 'application/json'})\n\n# Create a request instance\nrequests.post('https://api.jianshu.com/predict/predict',\n              json={'model': 'predict_text'},\n              headers={'Authorization': 'token {}'.format(API_KEY),\n                      'Content-Type': 'application/json'})\n\n# Create a request instance\nrequests.post('https://api.jianshu.com/predict/predict',\n              json={'model': 'predict_custom'},\n              headers={'Authorization': 'token {}'.format(API_KEY),\n                      'Content-Type': 'application/json'})\n\n# Create a request instance\nrequests.post('https://api.jianshu.com/predict/predict',\n              json={'model': 'predict_custom_headers'},", "error": "  File \"/tmp/tmphjzbg2qr.py\", line 25\n    requests.post('https://api.jianshu.com/predict/predict',\n                 ^\nSyntaxError: '(' was never closed\n"}
