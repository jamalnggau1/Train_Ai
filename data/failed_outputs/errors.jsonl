{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport json\nimport requests\nimport sys\n\nrequests.get(url=\"https://example.com\")\n\n# get the headers\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.headers)\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())", "id": "37f343d4-0363-452d-9868-669d18ee0f01", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\n\n# Step 1: Create an HTTP Basic auth object.\nauth = HTTPBasicAuth(\"USERNAME\", \"PASSWORD\")\n\n\n# Step 2: Create a Session Object.\nsession = requests.Session()\n\n# Step 3: Use the Session Object to make the POST Request.\nresponse = session.post(\"https://httpbin.org/post\", json={\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}, auth=auth)\n\n# Step 4: Print the Response Object.\nprint(f\"Response from the server:\\n{response.text}\")\n\n\n# Step 5: Use the Session Object to perform a GET Request.\nresponse = session.get(\"https://httpbin.org/get\")\n\n# Step 6: Print the Response Object.\nprint(f\"Response from the server:\\n{response.text}\")", "id": "378c5f40-6e22-44fe-899f-d5739bdf662e", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nimport random\nimport time\nimport datetime\nfrom multiprocessing import Process\n\n# Create data dictionary\ndata = {'name': 'test','surname': 'dz'}\n\n# Create a request\ndef get_data():\n    return requests.get('http://api.example.com/users')\n\n# Create a function to fetch data in json format\ndef get_json(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response\n    print(response.text)\n    # Return a Response object\n    return response.json()\n\n# Create a function to fetch data in data dictionary format\ndef get_data_dictionary(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response\n    print(response.text)\n    # Return a Response object\n    return response.json()\n\n# Create a function to fetch data in data dictionary format\ndef get_data_dictionary_list(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response", "id": "bdcf9d2f-4de0-493d-9d73-9dfd7bd89f92", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "# import requests\n# import json\n#\n# url = 'https://api.example.com/users'\n#\n# # response = requests.get(url)\n# # print(response.json())\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n#\n# # response = requests.get(url)\n# # print(response.text)\n# #\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status", "id": "94195975-5d56-4080-8a00-36892815aac1", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to swap MON to multiple tokens (WSOL, DAK, ETH, YAKI, CHOG) and swap back half to MON.", "input": "Using each wallet from wallets.txt, swap MON to each token listed above, then take 50% of each and swap it back to MON. Wait 6 hours before repeating the process.", "output": "import requests\nimport json\nimport pandas as pd\n\n# Get wallet data using get(URL) from url\ndef get_data(url):\n    response = requests.get(url)\n    json_data = json.loads(response.text)\n    return json_data\n\ndef get_mon():\n    mon = {}\n    mon['WSOL'] = 'https://finance.yahoo.com/quote/WSOL/sse?p=WSOL'\n    mon['DAK'] = 'https://finance.yahoo.com/quote/DAK/sse?p=DAK'\n    mon['ETH'] = 'https://finance.yahoo.com/quote/ETH/sse?p=ETH'\n    mon['YAKI'] = 'https://finance.yahoo.com/quote/YAKI/sse?p=YAKI'\n    mon['CHOG'] = 'https://finance.yahoo.com/quote/CHOG/sse?p=CHOG'\n    mon['DUK'] = 'https://finance.yahoo.com/quote/DUK/sse?p=DUK'\n    mon['DUK'] = 'https://finance.yahoo.com/quote/DUK/sse?p=DUK'\n    mon['DUK']", "id": "61734d11-650d-4685-839d-c4c7707aaea6", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "output": "# import os\n# import json\n# import datetime\n# import time\n# import sys\n# import requests\n# import json\n# import subprocess\n# import os\n# import pathlib\n# import shutil\n# from web3 import Web3\n# from web3.contract import Contract\n# from contract import hash_to_address, address_to_hash, get_monad_account\n# import keyring\n# from keyring.backends.mackeyring.client import MacKeyringClient\n# import keyring.util\n# import json\n# from web3.auto import w3\n# import keyring\n# import os\n# import pathlib\n# import shutil\n# from time import sleep\n# from web3.contract import Contract\n# from contract import hash_to_address, address_to_hash, get_monad_account\n\n\n# def main():\n#     contract_addr = get_monad_account()\n#     token = \"tokens/\" + contract_addr\n#     url = \"https://monad.monad.xyz/swap\"\n#     print(\"swap contract address: \" + contract_addr)\n#     print(\"swap token address: \" + token)\n#     print(\"url: \" + url)\n#     print(\"-----------------------------------\")\n#     print(\"start sw", "id": "5f5b9beb-c176-4628-a28c-80d0ded627f9", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "'''\nimport requests\n\nsession = requests.Session()\n\n# post\nr = session.post('https://example.com/api/login',\n                 json={\n                     \"email\": \"jamal@gmail.com\",\n                     \"pass\": \"123456\",\n                 }\n                 )\nprint(r.text)\n\n# get\nr = session.get('https://example.com/api/login')\nprint(r.text)\n'''", "id": "86bf6326-1545-492f-ac81-dd61de6609b7", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "from datetime import datetime, timedelta\nimport requests\nimport re\nimport json\nimport threading\nimport os\nimport logging\nimport time\nfrom argparse import ArgumentParser\nfrom urllib3.exceptions import NewConnectionError\n\n# For error handling\nrequests.packages.urllib3.disable_warnings()\n\n# Set up the logging\nlogging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)\n\n# Set up logging for API calls\nlogger = logging.getLogger(__name__)\n\n# Arguments\nparser = ArgumentParser(description='DATACUBE-MONAD-NETWORK-TOKEN-SWAP-ROUTER')\nparser.add_argument('-r', '--router', required=True, dest='router', help='Router IP address.')\nparser.add_argument('-u', '--user', required=True, dest='user', help='User to perform token swaps with.')\nparser.add_argument('-m', '--amount', required=True, dest='amount', help='Amount to be swapped.')\nparser.add_argument('-d', '--deadline', required=True, dest='deadline', help='Deadline of the token swaps in the future.')", "id": "3e2ca0b0-2352-4ba3-9393-5787a4cab1d1", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a script to check MON balance before swapping.", "input": "Before performing any swap action, ensure that the MON balance is sufficient. Skip the wallet if balance is below a minimum threshold.", "output": "import json\nimport requests\nimport time\nimport base64\n\n# Get the current balance\ndef getBalance():\n    url = 'https://api.monero.org/v2/monero/balance?limit=5000'\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']\n    else:\n        return None\n\n# Get the current address balance\ndef getAddressBalance():\n    url = 'https://api.monero.org/v2/monero/address/' + getWalletAddress()\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']\n    else:\n        return None\n\n# Get the current address balance\ndef getAddressBalance():\n    url = 'https://api.monero.org/v2/monero/address/' + getWalletAddress()\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']", "id": "d9e1ba5e-47b7-4eb9-846e-806980358c65", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nfrom pprint import *\n\n# get_ipython().run_line_magic('matplotlib', 'inline')\n\n# --------------------------------------------------------------------------------------------------------------------\n# GET USER DATA\n# --------------------------------------------------------------------------------------------------------------------\n\n# 1. GET\n# 1-1. Login\n# 1-2. Get user data\n# 1-3. Get data with access token\n# 1-4. Check data with bearer token\n# 1-5. Get user with token\n# 1-6. Get user with token\n# 1-7. Get user with token\n# 1-8. Get user data with access token\n# 1-9. Get user data with access token\n# 1-10. Get user data with access token\n# 1-11. Get user data with access token\n# 1-12. Get user data with access token\n# 1-13. Get user data with access token\n# 1-14. Get user data with access token\n# 1-15. Get user data with access token\n# 1-16. Get user data with access token\n# 1-17. Get user data with access token\n# 1-18. Get user data with access token\n# 1-19. Get user data with access token\n# 1-20. Get user data with access token\n# 1-21. Get user data with access token\n# 1-22. Get", "id": "e5034961-9bf7-4925-9167-da3b6bcf7684", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# [POST] https://example.com/api/login\n# {\n#    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MjM3ODA1NTk2MjYzMjQzNzE4MDAxMWViMjQ1NjI1MzQ0LTJhNDRmMzItMzkzNzM0ZjBhZDU2Y2ZmYjQzOCJ9.eyJpc3MiOiJodHRwczovL2ByZW5kZXJzaW9uIjoiMTI2MzU0MS1hMGUxNzg0MjY0MTAyNGE2MjYzOTI2Nzk0MjYzLCJhdWQiOiJodHRwczovL2ByZW5kZXJzaW9uIjoiYWJlIjoxNzE0MzU0Njk2YzA4MTYxNzE5MjA2MTM0MjM5MjYzMTIzNDUzNzg4LCJ", "id": "d1b05dba-fb1c-43b3-bcf1-f424fb83b662", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "# Imports\nimport requests\nimport datetime\nimport time\nimport json\nimport sys\nimport os\nimport re\nimport requests\nimport hashlib\nimport base64\nimport string\nimport binascii\nimport pandas as pd\nimport numpy as np\nimport threading\nimport concurrent.futures\nimport shutil\nimport shutil\nimport uuid\nimport time\n\n\nclass monad_network_har_wrapper:\n\n    # Constructor\n    def __init__(self, token_address, token_amount, token_deadline, token_wallet, token_wallet_address, token_wallet_amount, token_wallet_deadline,\n                 token_wallet_wallet_address, token_wallet_wallet_amount, token_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_address, token_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_wallet_address, token_wallet_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_wallet_wallet_address, token_wallet_wallet_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_wallet_wallet_deadline):\n        self.token_address = token", "id": "15c903c4-f05a-4a48-afd0-d0a553d2496e", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to run the entire MON swap routine in a loop with 6-hour delay.", "input": "Wrap the swap process in a while True loop, include try/except handling, and use time.sleep(21600) to wait between cycles.", "output": "import requests\nimport json\nimport time\nimport threading\n\nclass RestAPI():\n    def __init__(self, url, key, secret):\n        self.url = url\n        self.key = key\n        self.secret = secret\n\n    def get_swap_order(self, code):\n        params = {\n            'key': self.key,\n           'secret': self.secret,\n            'code': code\n        }\n        r = requests.get(url=self.url, params=params)\n        return json.loads(r.text)\n\nclass Swaps():\n    def __init__(self, swap_routine):\n        self.swap_routine = swap_routine\n\n    def get_swaps(self, code):\n        swap_order = self.swap_routine.get_swap_order(code)\n        if swap_order['code'] == code:\n            return swap_order['data']\n        elif swap_order['code']!= code:\n            raise Exception('Invalid swap code')\n        else:\n            raise Exception('Invalid swap order')\n\nclass SwapRoutine():\n    def __init__(self, api):\n        self.api = api\n\n    def get_swaps(self, code):\n        swap_order", "id": "a1bc2d66-69d0-44a4-96d3-7cfdeba42768", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "from requests import get, post\nfrom json import loads\n\ndef swap_mon():\n    swap_mon_dict = {\n    'NONE': '',\n    'BTC': 'BTC',\n    'ETH': 'ETH',\n    'XLM': 'XLM',\n    'USDT': 'USDT',\n    'DOGE': 'DOGE',\n    'TRX': 'TRX',\n    'USD': 'USD',\n    'EUR': 'EUR',\n    }\n    return swap_mon_dict.get(input('Input the amount of mon to swap in BTC: ').lower(), 'NONE')\n\ndef swap_tokens():\n    swap_tokens_dict = {\n    'NONE': '',\n    'BTC': 'BTC',\n    'ETH': 'ETH',\n    'XLM': 'XLM',\n    'USDT': 'USDT',\n    'DOGE': 'DOGE',\n    'TRX': 'TRX',\n    'USD': 'USD',\n    'EUR': 'EUR',\n    }\n    return swap_tokens_dict.get(input('Input the amount of tokens to swap in ETH: ').lower(), 'NONE')\n\ndef swap_all():\n    swap_", "id": "764ffccb-2820-49dc-958f-f3abfae93af2", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to log each transaction hash after a swap.", "input": "After each swap, print or save the transaction hash for tracking purposes.", "output": "import requests\nimport json\n\n## Step 1: Get the URL that returns the list of swaps and save it to a variable\n## Step 2: Make a GET request to the URL and save it to a variable called data\n## Step 3: Print the data from the response\n\n# url = \"https://api.coingecko.com/api/v3/swaps/cached/\"\n# response = requests.get(url)\n# data = response.json()\n\n# print(data)  # prints a list of dictionaries\n# print(data[0])  # prints the first dictionary\n# print(data[:10])  # prints the top 10 results\n\n# Create a variable named data, which is a list of dictionaries\ndata = []\n\n# Step 4: Loop through each item in data, and add it to a variable named coin_name\nfor coin in data:\n    coin_name = coin['name']\n    if coin_name!= \"Bitcoin\":\n        coin_name = \"Bitcoin\"\n    print(\"coin name: \", coin_name)  # prints the coin name\n\n    # Step 5: Print the data from the coin's current price data\n    coin_price = coin['current_price']['usd']\n    print(\"current price: \", coin_price)  # prints the current price\n\n    # Step 6", "id": "5d4321d2-9829-4830-a85c-2e8a5ae34221", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "# Import the requests package\nimport requests\n\n# Import the json module\nimport json\n#Import the time module\nimport time\n#Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport requests as r\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport requests\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json\n# Import the time module\nimport time\n# Import the os module to clear the output in the terminal\nfrom os import system\n\n# Set the headers module\nimport json", "id": "8a29c60e-b854-4f1f-926a-b713a8c95ef7", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "output": "# Code:\n\n# 1. Create a script that will perform a transaction that swaps Monad to Monad.\n# 2. Run the script using a custom router on testnet.monad.xyz and loop to check if the swap is successful.\n\n\n# Importing the libraries\nimport requests\nimport json\n\n# Getting the API key\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\n# Getting the token\nimport os\nos.environ['API_KEY'] = 'F48D5B5D6D8F0CED7E4E0A'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'YBZ5R2J2SZCLPX6H7KW'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'Z6C46A2F5D5E8DFE7E9E'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'B6C88F3F4C77E12C0A7B6'\n\n# Getting the API key\nimport os\nos.environ['API_KEY'] = 'A2C3B2C0B7A8A7E3D4E'\n\n# Getting the API", "id": "abfbd057-0910-476d-90cb-5a590aaeae11", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# import requests\n# import json\n#\n#\n# def login():\n#     data = {\n#         \"email\": \"jamal@gmail.com\",\n#         \"pass\": \"123456\"\n#     }\n#     response = requests.post(\"https://example.com/api/login\", data)\n#     # check if status code is 200, raise an HTTPException if not\n#     if response.status_code!= 200:\n#         raise ValueError(f'HTTP status code is {response.status_code}')\n#     # return response object\n#     return response.json()\n#\n#\n# def create_room(room_id, name, members):\n#     data = {\"room_id\": room_id, \"name\": name, \"members\": members}\n#     response = requests.post(\"https://example.com/api/room\", data)\n#     if response.status_code!= 201:\n#         raise ValueError(f'HTTP status code is {response.status_code}')\n#     return response.json()\n#\n#\n# def update_room(room_id, name, members):\n#     data = {\"room_id\": room_id, \"name\": name, \"members\": members}\n#     response = requests.put(\"https://example.com/", "id": "7884509d-8fdb-4d15-9dad-cadee220c05b", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nfrom requests.auth import HTTPBasicAuth\n\n\n\n# creating a function for getting the data from a url\ndef get(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)\n        return None\n\n\n# creating a function for getting the data from a url\ndef get_name(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)\n        return None\n\n\n# creating a function for getting the data from a url\ndef get_email(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)\n        return None\n\n\n# creating a function for getting the data from a url\ndef get_phone(url):\n    try:\n        res = requests.get(url)\n        res.raise_for_status()\n        return res.json()\n    except requests.RequestException as e:\n        print(e)", "id": "f63c1eeb-bba1-4250-aa95-b2e261b2ba5e", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\n\n# [GET] https://api.example.com/users\n\n\n# [GET] https://api.example.com/users\n# [GET] https://api.example.com/users/2\n\n\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n\n# [GET] https://api.example.com/users/2\n# https://api.example.com/users/2\n# https://api.example.com/users/2\n# https://api.example.com/users/2\n\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users/2\n# [GET] https://api.example.com/users", "id": "0acafe74-21c9-4d33-a149-cb2385268092", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "output": "import requests\nimport hashlib\nimport json\nimport time\nimport os\n\n# Function to generate a sha256 hash of the token dictionary.\ndef sha256(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_hex(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_decode(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_decode_hex(tokenDict):\n    myHash = hashlib.sha256(str(tokenDict).encode('utf-8')).hexdigest()\n    return myHash\n\n# Function to generate a sha256 hash of tokenDict.\ndef sha256_decode_int(tokenDict):\n    my", "id": "8f7e850d-f8b0-4ffc-82da-10fa33b47475", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\n\n# GET /users/:user_id\n# Response: {'id': user_id, 'email': 'test@example.com', 'first_name': 'John', 'last_name': 'Doe'}\n# Response: [{'id': 1, 'email': 'test@example.com', 'first_name': 'John', 'last_name': 'Doe'}]\n# Response: [{'email': 'test@example.com', 'first_name': 'John', 'last_name': 'Doe'}]\n\nprint('\\n--- Python script for fetching user data ===')\n\n# url = 'http://api.example.com/users/1'\n# response = requests.get(url)\n# print(response.json())\n\n\n# url = 'http://api.example.com/users'\n# headers = {\n#     'Authorization': 'Basic Zm7NmNmLTQzMTcxMjM0MjI5MjA2MTg3'\n# }\n# response = requests.get(url, headers=headers)\n# print(response.json())\n\n# url = 'http://api.example.com/users'\n# headers = {\n#     'Authorization': 'Basic YTJXN", "id": "e0e3fb34-f258-4108-8128-2406011812a8", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# POST:\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jenni@gmail.com\", \"pass\": \"12345678\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"password\": \"123456\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"password\": \"123456\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"12345678\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jenni@gmail.com\", \"pass\": \"12345678\"}\n# {\"email\": \"jenni@gmail.com\", \"pass\": \"123456789\"}\n\n# Headers:\n# Content-Type: application/json\n\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"", "id": "e9f75b2e-0cbd-4e28-acd2-a9fbc906d6bd", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "# import requests\n# import json\n# from requests.auth import HTTPBasicAuth\n#\n# base_url = \"https://api.example.com\"\n# headers = {'Content-Type': 'application/json'}\n#\n# # Authentication\n# auth = HTTPBasicAuth('my_username','my_password')\n#\n# # Query /users GET\n# response = requests.get(base_url + \"/users\", headers=headers, auth=auth)\n#\n# # print(response.status_code)\n# # print(response.text)\n# # print(response.headers)\n# # print(response.json())\n#\n# print(response.json())\n# print(response.text)\n\nfrom urllib.request import urlopen\n\nimport json\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport requests\nimport time\n\n# User_ID = input(\"Enter your user ID : \")\n#\n#\n# def get_stations():\n#     # print('get_stations called')\n#     response = requests.get(base_url + \"/stations\", headers=headers, auth=auth)\n#     # print(response.status_code)\n#     # print(response.text)\n#     # print(response.", "id": "48ecc971-b23b-4800-916d-fd952bbdd256", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# Output:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 2: Use the requests module to call the requests.post() function and store the response in a variable called response.\n# Details: [POST] https://example.com/api/login\n# Response body:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 3: Use the requests module to call the request.post() function and store the response in a variable called result.\n# Details: [POST] https://example.com/api/login\n# Response body:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 4: Use the requests module to call the request.get() function and store the response in a variable called result.\n# Details: [GET] https://example.com/api/login\n# Response body:\n# {\n#   \"email\": \"jamal@gmail.com\",\n#   \"pass\": \"123456\"\n# }\n\n\n# Step 5: Use a for loop to iterate over the response variable and store the value of the key-value pair in a", "id": "977cb5d9-07f8-47cd-ba26-cc7c98905728", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# Request body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Request headers:\n# Content-Type: application/json\n#\n# Headers:\n# Authorization: Bearer <token>\n# User-Agent: Python-requests/2.23.0\n#\n# Body:\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Response body (JSON):\n# [{\"id\": 1, \"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}]\n\n# Response headers (JSON):\n# {\n#     \"Content-Type\": \"application/json\",\n#     \"Content-Disposition\": \"inline; filename=api-login.json\",\n#     \"Content-Length\": \"36\",\n#     \"User-Agent\": \"Python-requests/2.23.0\",\n#     \"Accept\": \"application/json\",\n#     \"Accept-Charset\": \"UTF-8\"\n# }\n\n# Response headers (JSON):\n# {\n#     \"Content-Type\": \"application/json\",\n#     \"Content-Disposition\": \"inline; filename=api-login.json\",\n#     \"Content-Length\": \"36\",\n#     \"User-Agent\":", "id": "eea4a7b2-884e-4172-8fd3-c298e7141c82", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "import requests\nfrom bs4 import BeautifulSoup\nimport re\n# import json\n# import datetime\nimport time\nimport os\nimport yaml\n\n# import sys\n# sys.path.append('/Users/sakibot/projects/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/')\n# sys.path.append('/Users/sakibot/projects/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/p2-solver/')\n# for", "id": "d6fd8475-eab5-452f-a628-2efec1c90dde", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# The code in the script represents the simplest possible HTTP request. The request is sent to the API through the `requests` module.\n\n# The output of the script is:\n\n# POST\n# {\n# \t\"email\": \"jamal@gmail.com\",\n# \t\"pass\": \"123456\"\n# }\n\n# The request body should be a JSON object with the following structure:\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# The input body should be a JSON object with the following structure:\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# The output body should be an empty dictionary object which is returned from the script.\n\n# Here are the examples of the input and output objects:\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# {\"email\": \"jamal@gmail.com\", \"", "id": "756320ec-03d1-4eaf-b567-9aaf3ce9f722", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nimport base64\n\n# Step 1: Create a function to query the API\ndef get_request_body(url, params):\n    \"\"\"\n    Parameters:\n        url (string): API endpoint\n        params (dictionary): query parameters\n\n    Returns:\n        response (object): The response object from the API\n    \"\"\"\n    response = requests.get(url, params=params)\n    return response\n\n\n# Step 2: Create a function to validate the API output\ndef validate_output(response):\n    \"\"\"\n    Parameters:\n        response (object): The response object from the API\n\n    Returns:\n        valid (bool): True if the output is valid, False otherwise\n    \"\"\"\n    valid = True\n    if'status' in response.keys():\n        if response['status']!= 200:\n            valid = False\n    return valid\n\n# Step 3: Create a function to convert the JSON response back to a Python dictionary\ndef response_to_dictionary(response):\n    \"\"\"\n    Parameters:\n        response (object): The response object from the API\n\n    Returns:\n        response_dict (dictionary): The response object as a dictionary\n    \"\"\"\n    try:\n        return response.json()\n    except ValueError:\n        return response.text\n\n# Step 4: Create a function to convert the", "id": "c5bba4aa-cb3b-4221-bdb1-afd90ccd1c50", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "import requests\nimport re\nimport json\nimport os\nimport time\nimport logging\nimport sys\nimport configparser\nimport collections\n\n# read from.har file\nclass HarReader:\n    def __init__(self, path):\n        \"\"\"\n        Initializes the har reader\n        :param path: path\n        \"\"\"\n        # reading data from.har file\n        try:\n            with open(path, \"r\") as f:\n                self.har_data = f.read()\n        except FileNotFoundError:\n            print(\"File not found\")\n            sys.exit()\n        except Exception as e:\n            print(\"Unexpected error:\", e)\n            sys.exit()\n\n    def get_all_data(self):\n        \"\"\"\n        Gets all tokens and their data from the.har file\n        :return: data\n        \"\"\"\n        # return tokens and data from.har file\n        # extract tokens from.har file\n        tokens_data = re.findall(r\"\\{\\\"tokens\\\":\", self.har_data)\n        # extract data from.har file\n        tokens = re.findall(r\"\\{\\\"tokens\\\":\\s*(\\S+)\", tokens_data[0])\n        # extract data from.har file\n        wallets = re", "id": "6aca898d-9aab-4f6d-ad57-7e52ff9d9d1f", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# Outputs:\n\n# <Response [200]>\n# {\n#     \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2NvZG9uZG9uZS5weXNlcnJ9.ZXHwY29tcGVkLmNvbSIsImV4cCI6MTYyMzU5NzE3NTEzLTg0OTI0OWRlMzE5LTE1NTE1NjQwMHQ1NjM5LTE1MHcwMCIsImV4cCI6MTYyMzYzOTM3LTg0OTU5LCJleHAiOjE2MzQ5NzY5NTY2MzE5OCIsImV4cCI6MTYyMzU5NzE3MjU2NDY3NzE3LTA1LWI1ZjItZW51ZTJhYjVkNGQwYjUwMzk3NTEtMzI0MTAzODQwZmFkZDQ1MzNmQzZ", "id": "9e08bb02-444b-443a-8842-4316df676a94", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to swap MON to multiple tokens (WSOL, DAK, ETH, YAKI, CHOG) and swap back half to MON.", "input": "Using each wallet from wallets.txt, swap MON to each token listed above, then take 50% of each and swap it back to MON. Wait 6 hours before repeating the process.", "output": "# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport json\n\n# import libraries for json\nimport requests\nimport json\nimport os\nimport time\nimport threading\nfrom datetime import datetime, timedelta\nimport pytz\nimport hashlib\n\n# function to get the number of days since yesterday\ndef get_days_since_yesterday(yesterday_date):\n    today = datetime.today()\n    difference = (datetime.strptime(yesterday_date, \"%Y-%m-%d %H:%M:%S\") - today).days\n    return difference\n\n# function to get the last updated price\ndef get_last_updated_price(wallet_list):\n    # get the last updated price\n    # get the latest updated price from a wallet list\n    # return the last updated price in a dictionary format\n    latest_price = ''\n    for wallet in wallet_list:\n        latest_price = wallet['price']\n        break\n    return latest_price\n\ndef extract_details(wallet_list):\n    # extract the details of each wallet\n    details_dict = {}\n    # create the dictionary to store details\n    for wallet in wallet_list:\n        details_dict[wallet['name']] = wallet['price']\n    return details_dict", "id": "a609c231-a85c-4bbb-97cb-faebf5adaa86", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "import requests\nimport json\nfrom tkinter import *\n\nclass swap:\n    def __init__(self, app):\n        self.app = app\n        self.swap_amount = str(0.00)\n        self.swap_amount_text = StringVar()\n        self.swap_amount_text.set(\"0.00\")\n        self.swap_amount_text.trace(\"w\", self.update_swap_amount)\n\n    def update_swap_amount(self, *args, **kwargs):\n        self.swap_amount = str(self.app.swap_amount_text.get())\n        self.app.amount = float(self.swap_amount)\n        self.app.show_balance()\n\n    def run(self):\n        self.app.run()\n\nclass main:\n    def __init__(self):\n        self.root = Tk()\n        self.root.title(\"Swap Your Money\")\n        self.root.geometry(\"550x370\")\n        self.root.columnconfigure(0, weight=1)\n        self.root.rowconfigure(0, weight=1)\n        self.root.grid_rowconfigure(0, weight=1)\n        self.root.grid_columnconfig", "id": "a4b457d2-2b26-48fe-bcbc-05fec488df38", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Generate a Python script to send a POST request to an API using the requests module.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "import requests\n# url = \"https://api.github.com\"\n# headers = {\n#     \"Content-Type\": \"application/json\",\n#     \"Accept\": \"application/json\",\n#     \"Authorization\": \"token abcdefghijklmnopqrstuvwxyz\"\n# }\n# response = requests.post(url, headers=headers)\n# print(response.content.decode('utf-8'))\n\n# url = \"https://httpbin.org/post\"\n# headers = {\n#     \"Content-Type\": \"application/json\",\n#     \"Accept\": \"application/json\",\n#     \"Authorization\": \"token abcdefghijklmnopqrstuvwxyz\"\n# }\n# response = requests.post(url, headers=headers, data={\"key\": \"value\"})\n# print(response.content.decode('utf-8'))\n\nurl = \"https://httpbin.org/post\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"token abcdefghijklmnopqrstuvwxyz\"\n}\n# response = requests.post(url, headers=headers, json={\"key\": \"", "id": "d8d5b556-ceb0-4ea1-916a-269c0bd1c024", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Write a Python script that runs an infinite loop, catching exceptions and retrying after delay.", "input": "Perform a set of API or blockchain interactions in a try/except block and retry after 10 seconds if an exception occurs.", "output": "import requests\nimport time\n\nwhile True:\n    try:\n        resp = requests.get('http://api.ipify.org/')\n        ip = resp.text\n        print(f\"IP address of the network: {ip}\")\n        break\n    except Exception as e:\n        print(f\"Error: {e}\")\n        print(\"Exception occurred in the script, retrying in 10 seconds...\")\n        time.sleep(10)\n        continue", "id": "b8d14909-7db6-4421-8186-f6641d80ac97", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "\"\"\"\nimport requests\nimport json\nimport time\n\n# Request body\nrequestB = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Request header\nheaders = {\"Content-Type\": \"application/json\"}\n\n# Request data\ndata = {\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}\n\n# Send request\nr = requests.post(\"http://httpbin.org/post\", json=data, headers=headers)\n\n# Response\nprint(r.text)\nprint(r.headers)\nprint(r.status_code)\n\n# Check status code\nprint(r.status_code)\n\n# Check content\nprint(r.content)\n\n# Check response headers\nprint(r.headers)\n\n# Get response headers\nprint(r.headers[\"Content-Type\"])\n\n# Get response body\nprint(r.headers[\"Content-Type\"])\n\n# Get response body:\nprint(r.content)\n\n\"\"\"\n\n# Write a Python script that accepts a URL as an argument and prints the content of the response.\n#\n# HINT: The script should look as follows:\n#\n# response = requests.get(\"https://httpbin.org/get\")\n#\n# Write a Python script to display the content of", "id": "144dfea9-aad1-463f-87cf-97b8a636c985", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "import requests\nimport os\nimport json\nimport time\nimport random\nimport requests\nfrom datetime import datetime\nimport datetime\nimport requests\nimport urllib\nimport sys\nimport subprocess\nimport threading\nfrom pathlib import Path\n\n# Define the token dictionary as a dictionary with the following key-value pairs:\n# \"token\" (string)\n# \"address\" (string)\n# \"amount\" (int)\n# \"deadline\" (string)\n# \"wallet\" (string)\n# \"token_address\" (string)\n# \"token_amount\" (int)\n# \"token_deadline\" (string)\n# \"user_address\" (string)\n# \"user_wallet\" (string)\n# \"user_wallet_address\" (string)\n# \"user_wallet_amount\" (int)\n# \"user_wallet_deadline\" (string)\n\n# The function will create a.har file with the following contents:\n# token: <token_id>\n# address: <address_id>\n# amount: <amount>\n# deadline: <deadline>\n# wallet: <wallet>\n# token_address: <token_address>\n# token_amount: <token_amount>\n# token_deadline: <token_deadline>\n# user_address: <", "id": "585cca57-a52c-4bb3-b032-83bf7341789f", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to log each transaction hash after a swap.", "input": "After each swap, print or save the transaction hash for tracking purposes.", "output": "# from time import sleep\n# import requests\n# import json\n#\n#\n#\n# def log_transaction_hash(transaction_hash, wait_time):\n#     url = 'https://api-sandbox.binance.com/api/v3/logEntries'\n#     headers = {\n#         'X-MBX-APIKEY': 'HUc4QkLdHmZrX0vJdg3YfMjY1d2y9XFzM1RmDqM7rG2n8wgZYjgw',\n#         'Content-Type': 'application/json',\n#     }\n#     data = json.dumps({\n#         'event': 'log_transaction',\n#         'account': '1M3C0ZQ6B2XZRVY2S5HjxK',\n#        'message': 'Log Transaction',\n#         'transaction_hash': transaction_hash,\n#         'address': '0xCf65a1d4dcB4C0B5E2aB6c8dAa07b8Ff9A2ef5Ef3F1cA8Ce66E1eEe0c',\n#         'datetime': '", "id": "05b106bb-7e0a-471c-9f39-431b7b8014c9", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "from requests import Request, Session\nfrom urllib.parse import urlparse\nimport json\nimport datetime\nimport time\n\ntoken = \"\"\n\n# User input to get the token\ndef get_token():\n    global token\n    print(\"Please Enter your token\")\n    token = input()\n\n# Check if the token is valid\ndef check_token():\n    global token\n    if token == \"\":\n        print(\"Please Enter your token\")\n        return True\n    else:\n        return False\n\n\n# GET /user-tokens/tokens?access_token=your_token\ndef get_tokens():\n    global token\n    print(f\"Please Enter your token:\")\n    token = input()\n    return token\n\n# Get the token on the server\ndef get_token_server():\n    global token\n    url = \"https://api.etherscan.io/api?module=account&action=tokens&address=\" + token + \"&offset=0&limit=5000\"\n    response = requests.get(url)\n    token = response.json()\n    print(token)\n    return token\n\n\n# Get last 4 digits of the token\ndef get_last_four():\n    global token\n    print(f\"Please Enter your token:\")\n    token = input()", "id": "bf6ca713-4a8c-434d-b72b-5b4cf8114d7f", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nimport pandas as pd\nimport numpy as np\nfrom bs4 import BeautifulSoup\nfrom requests.auth import HTTPBasicAuth\nimport os \nfrom datetime import datetime\nimport time\nimport urllib3\nfrom pytz import timezone\n\n# Get the site root and create a directory structure for storing data\ndef get_site_root():\n  site_root_folder_path = os.path.abspath(os.path.join(os.getcwd(), '..'))\n  if not os.path.isdir(site_root_folder_path):\n    os.makedirs(site_root_folder_path)\n  return site_root_folder_path\n\n# Create a dir to store the data\ndef create_site_root_folder(site_root_folder_path):\n  if not os.path.isdir(site_root_folder_path):\n    os.makedirs(site_root_folder_path)\n\n# Create a local folder for holding the data\ndef create_local_folder(site_root_folder_path):\n  if not os.path.isdir(site_root_folder_path):\n    os.makedirs(site_root_folder_path)\n\n# Download the site root to local", "id": "4fc9b343-8043-455c-b794-b981188de82f", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "import requests\nimport json\nimport os\n\nurl = \"https://v2.slack.com/api/login\"\npayload = {\n    \"email\": \"jamal@gmail.com\",\n    \"pass\": \"123456\"\n}\n\nresponse = requests.post(url, json=payload)\n\nprint(response.headers)\nprint(response.status_code)\nprint(response.text)\n\n# Create a directory named'slack_files'\ntry:\n    os.mkdir('slack_files')\nexcept FileExistsError:\n    pass\n\n# Write a Python script using the requests module.\n# Task: Write a Python script using the requests module to perform the following HTTP request.\n# Details: [POST] https://example.com/api/files/upload\n\nurl = \"https://v2.slack.com/api/files/upload\"\npayload = {\n    \"file\": \"slack_files\\\\myfile.txt\"\n}\n\nresponse = requests.post(url, json=payload)\nprint(response.headers)\nprint(response.status_code)\nprint(response.text)", "id": "f41cb77e-6cf7-47cf-9f79-af0c9c64d9c3", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Create a Python script to fetch user data from a public API.", "input": "[GET] https://api.example.com/users", "output": "# Import requests\nimport requests\n\n# Define your own function\ndef get_user(username):\n    # Fetch username from url using get\n    user_response = get_user_api(username)\n    # Fetch user data\n    user_data = user_response.json()\n\n    # Print user data\n    print(user_data)\n\n# Get user data API\ndef get_user_api(username):\n    # Create list of login credentials\n    login_credentials = [\n        {\n            \"username\": username,\n            \"password\": \"password\"\n        }\n    ]\n\n    # Call API to get user data\n    user_response = requests.get(\n        \"https://api.github.com/users\",\n        params = login_credentials\n    )\n\n    # Print user data\n    print(user_response.json())\n\n    # Exit script\n    exit()\n\n# Run script\nif __name__ == \"__main__\":\n    get_user(\"user@gmail.com\")", "id": "e55e5933-3899-4963-9a6c-9d2154fb4acf", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nimport time\n\n# Function to fetch data from API\ndef fetch(url, method='GET', headers=None, params=None, data=None, auth_token=None, token=None):\n    if auth_token==token:\n        if method == 'GET':\n            r = requests.get(url, headers=headers, params=params, data=data, auth=auth_token)\n        else:\n            r = requests.post(url, headers=headers, params=params, data=data, auth=auth_token)\n    else:\n        r = requests.get(url, headers=headers, params=params, data=data, auth=auth_token)\n\n    return r\n\n\n# Function to create a user\ndef create(url, headers=None, params=None, data=None, auth_token=None, token=None):\n    if auth_token==token:\n        create_url = url + '/users'\n        r = requests.post(url=create_url, headers=headers, params=params, data=data, auth=auth_token)\n    else:\n        create_url = url + '/users'\n        r = requests.post(url=create_url, headers=headers, params=params, data=data, auth=auth_token)", "id": "62d8c3e6-bff0-4fe0-a6f3-471bc7bd311d", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "'''import requests\n\nurl = \"http://example.com/api/login\"\n\n# create a dict object of payload\npayload_dict =  {\n  \"email\": \"jamal@gmail.com\",\n  \"pass\": \"123456\"\n}\n\n# post a request\nresponse = requests.post(url, data = payload_dict)\nprint(response)\nprint(response.text)\n\n# get the response\nresponse_text = response.text\nprint(response_text)\n'''\nimport requests\n\n# define the url\nurl = \"http://httpbin.org/post\"\n\n# define the payload\npayload = '{\"email\":\"jamal@gmail.com\",\"pass\":\"123456\"}'\n\n# make an HTTP request\nresponse = requests.post(url, data = payload)\n\n# convert the response to a dictionary\nresponse_dict = response.json()\n\n# print the response\nprint(response_dict)", "id": "6c8e21f6-98dd-4512-b71f-b94d0ad5e89a", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Generate a Python script that replays a POST request extracted from a HAR file.", "input": "Use data from a HAR file where the request method is POST to https://wizolayer.com/api/register with headers and body containing user registration info.", "output": "import requests\nimport sys\nimport re\n\n# HAR: https://wizolayer.com/api/register?user_id=872&user_email=\"wizolayer_email@wizolayer.com\"&password=\"wizolayerPassword\"\npost_data = {\n    \"user_id\": \"872\",\n    \"user_email\": \"wizolayer_email@wizolayer.com\",\n    \"password\": \"wizolayerPassword\"\n}\n\n# Add the URL to the end of the HAR file\nurl = \"https://wizolayer.com/api/register?user_id=872&user_email=\" + post_data[\"user_email\"] + \"&password=\" + post_data[\"password\"]\n\n# Read the HAR file in binary mode\nr = requests.get(url)\n\n# Find the lines containing the HAR file\nhar_lines = re.findall(r'<data><post><referrer=\"(.+?)\"/></post><reid=\"(.+?)\">?</reid></data>', r.text)\n\n# Print the HAR file lines\nprint(f\"HAR file lines: {har_lines}\")", "id": "ceaed22d-77a5-4967-85ca-e4c0cd423177", "rejected_reason": "Tidak ada fungsi atau kelas yang didefinisikan"}
{"instruction": "Simulate form submission using data from HAR file and automate with Python.", "input": "From the HAR, extract the request where user fills in form fields and submits to the server. Use Python to simulate the exact form submission.", "output": "from requests import Session\nimport requests\nimport json\nimport random\n\n\ndef create_random_user_id():\n\n    user_id = random.randint(1, 1000000)\n\n    return user_id\n\n\ndef get_user_input():\n    username = input(\"Please enter your username: \")\n    user_id = input(\"Please enter your user_id: \")\n\n    return username, user_id\n\n\ndef get_user_input_and_submit():\n    username, user_id = get_user_input()\n    request = json.dumps({\n        \"username\": username,\n        \"user_id\": user_id,\n        \"user_pw\": \"password\"\n    })\n\n    return request\n\n\ndef send_request_to_server(request):\n    response = requests.post(\"http://localhost:5050/api/users\", data=request)\n    print(response.json())\n\n\ndef get_user_details(request):\n    try:\n        response = requests.get(\"http://localhost:5050/api/users/\" + request['user_id'])\n        print(response.json())\n    except requests.exceptions.ConnectionError:\n        print(\"Connection problem\")\n\n\ndef main():\n    username, user_id = get_user_input()\n    print", "id": "bb855a44-db8c-46fb-8578-cb1d8751b54b", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Send a GET request to fetch token balance using data from HAR.", "input": "HAR captured a GET request to /balance/0x123TOKEN. Include proper headers.", "output": "# IMPORTING NECESSARY PACKAGES\n# requests is used to call GET requests with your HTTP token.\n# sys is used to read the HTTP headers.\nimport requests\nimport sys\nimport json\n\n# The base URL for your API call.\nBASE_URL = \"https://sandbox.safaricom.co.ke\"\n# The API Key from your API account.\nAPI_KEY = \"\"\n# The API Key from the API account.\nAPI_KEY_SECRET = \"\"\n\n\n# The function to get the response.\ndef get_json(url):\n    try:\n        response = requests.get(url=url, headers={'User-Agent': 'Mozilla/5.0'})\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException:\n        print(\"Unable to fetch data from API.\")\n    except json.decoder.JSONDecodeError:\n        print(\"Unable to parse response\")\n\n\n# Get the balance from your API.\n# The data returned should be a dictionary.\n# The dictionary should contain the following:\n#   - \"amount\": the amount you received from API.\n#   - \"currency\": the currency in which you received the amount.\n#   - \"date\": the date when you received the amount.", "id": "a6fbd3b1-b21b-4678-8d4e-6208bf533d6f", "rejected_reason": "Script tidak mengimpor modul apa pun"}
