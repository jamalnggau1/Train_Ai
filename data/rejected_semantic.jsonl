{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport json\nimport requests\nimport sys\n\nrequests.get(url=\"https://example.com\")\n\n# get the headers\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.headers)\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())\n\n# get the json of the response\nr = requests.get(url=\"https://api.github.com/user\", headers={'Accept': 'application/vnd.github.v3+json'})\nprint(r.json())", "id": "37f343d4-0363-452d-9868-669d18ee0f01", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\n\n# Step 1: Create an HTTP Basic auth object.\nauth = HTTPBasicAuth(\"USERNAME\", \"PASSWORD\")\n\n\n# Step 2: Create a Session Object.\nsession = requests.Session()\n\n# Step 3: Use the Session Object to make the POST Request.\nresponse = session.post(\"https://httpbin.org/post\", json={\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}, auth=auth)\n\n# Step 4: Print the Response Object.\nprint(f\"Response from the server:\\n{response.text}\")\n\n\n# Step 5: Use the Session Object to perform a GET Request.\nresponse = session.get(\"https://httpbin.org/get\")\n\n# Step 6: Print the Response Object.\nprint(f\"Response from the server:\\n{response.text}\")", "id": "378c5f40-6e22-44fe-899f-d5739bdf662e", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nimport random\nimport time\nimport datetime\nfrom multiprocessing import Process\n\n# Create data dictionary\ndata = {'name': 'test','surname': 'dz'}\n\n# Create a request\ndef get_data():\n    return requests.get('http://api.example.com/users')\n\n# Create a function to fetch data in json format\ndef get_json(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response\n    print(response.text)\n    # Return a Response object\n    return response.json()\n\n# Create a function to fetch data in data dictionary format\ndef get_data_dictionary(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response\n    print(response.text)\n    # Return a Response object\n    return response.json()\n\n# Create a function to fetch data in data dictionary format\ndef get_data_dictionary_list(url):\n    print(\"\\n\"+str(url))\n    # Make an url request\n    response = requests.get(url)\n    # Print the response", "id": "bdcf9d2f-4de0-493d-9d73-9dfd7bd89f92", "rejected_reason": "URL 'https://api.example.com/users' tidak ditemukan di script"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "# import requests\n# import json\n#\n# url = 'https://api.example.com/users'\n#\n# # response = requests.get(url)\n# # print(response.json())\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n#\n# # response = requests.get(url)\n# # print(response.text)\n# #\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status_code)\n# # print(response.headers)\n# # print(response.text)\n#\n#\n# # response = requests.get(url)\n# # print(response.status", "id": "94195975-5d56-4080-8a00-36892815aac1", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to swap MON to multiple tokens (WSOL, DAK, ETH, YAKI, CHOG) and swap back half to MON.", "input": "Using each wallet from wallets.txt, swap MON to each token listed above, then take 50% of each and swap it back to MON. Wait 6 hours before repeating the process.", "output": "import requests\nimport json\nimport pandas as pd\n\n# Get wallet data using get(URL) from url\ndef get_data(url):\n    response = requests.get(url)\n    json_data = json.loads(response.text)\n    return json_data\n\ndef get_mon():\n    mon = {}\n    mon['WSOL'] = 'https://finance.yahoo.com/quote/WSOL/sse?p=WSOL'\n    mon['DAK'] = 'https://finance.yahoo.com/quote/DAK/sse?p=DAK'\n    mon['ETH'] = 'https://finance.yahoo.com/quote/ETH/sse?p=ETH'\n    mon['YAKI'] = 'https://finance.yahoo.com/quote/YAKI/sse?p=YAKI'\n    mon['CHOG'] = 'https://finance.yahoo.com/quote/CHOG/sse?p=CHOG'\n    mon['DUK'] = 'https://finance.yahoo.com/quote/DUK/sse?p=DUK'\n    mon['DUK'] = 'https://finance.yahoo.com/quote/DUK/sse?p=DUK'\n    mon['DUK']", "id": "61734d11-650d-4685-839d-c4c7707aaea6", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to automate token swaps on the Monad network using Web3.py.", "input": "Swap MON to various tokens using a custom router on testnet.monad.xyz and then swap half back to MON, looping per wallet and sleeping 6 hours between cycles.", "output": "# import os\n# import json\n# import datetime\n# import time\n# import sys\n# import requests\n# import json\n# import subprocess\n# import os\n# import pathlib\n# import shutil\n# from web3 import Web3\n# from web3.contract import Contract\n# from contract import hash_to_address, address_to_hash, get_monad_account\n# import keyring\n# from keyring.backends.mackeyring.client import MacKeyringClient\n# import keyring.util\n# import json\n# from web3.auto import w3\n# import keyring\n# import os\n# import pathlib\n# import shutil\n# from time import sleep\n# from web3.contract import Contract\n# from contract import hash_to_address, address_to_hash, get_monad_account\n\n\n# def main():\n#     contract_addr = get_monad_account()\n#     token = \"tokens/\" + contract_addr\n#     url = \"https://monad.monad.xyz/swap\"\n#     print(\"swap contract address: \" + contract_addr)\n#     print(\"swap token address: \" + token)\n#     print(\"url: \" + url)\n#     print(\"-----------------------------------\")\n#     print(\"start sw", "id": "5f5b9beb-c176-4628-a28c-80d0ded627f9", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "'''\nimport requests\n\nsession = requests.Session()\n\n# post\nr = session.post('https://example.com/api/login',\n                 json={\n                     \"email\": \"jamal@gmail.com\",\n                     \"pass\": \"123456\",\n                 }\n                 )\nprint(r.text)\n\n# get\nr = session.get('https://example.com/api/login')\nprint(r.text)\n'''", "id": "86bf6326-1545-492f-ac81-dd61de6609b7", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "from datetime import datetime, timedelta\nimport requests\nimport re\nimport json\nimport threading\nimport os\nimport logging\nimport time\nfrom argparse import ArgumentParser\nfrom urllib3.exceptions import NewConnectionError\n\n# For error handling\nrequests.packages.urllib3.disable_warnings()\n\n# Set up the logging\nlogging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)\n\n# Set up logging for API calls\nlogger = logging.getLogger(__name__)\n\n# Arguments\nparser = ArgumentParser(description='DATACUBE-MONAD-NETWORK-TOKEN-SWAP-ROUTER')\nparser.add_argument('-r', '--router', required=True, dest='router', help='Router IP address.')\nparser.add_argument('-u', '--user', required=True, dest='user', help='User to perform token swaps with.')\nparser.add_argument('-m', '--amount', required=True, dest='amount', help='Amount to be swapped.')\nparser.add_argument('-d', '--deadline', required=True, dest='deadline', help='Deadline of the token swaps in the future.')", "id": "3e2ca0b0-2352-4ba3-9393-5787a4cab1d1", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create a script to check MON balance before swapping.", "input": "Before performing any swap action, ensure that the MON balance is sufficient. Skip the wallet if balance is below a minimum threshold.", "output": "import json\nimport requests\nimport time\nimport base64\n\n# Get the current balance\ndef getBalance():\n    url = 'https://api.monero.org/v2/monero/balance?limit=5000'\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']\n    else:\n        return None\n\n# Get the current address balance\ndef getAddressBalance():\n    url = 'https://api.monero.org/v2/monero/address/' + getWalletAddress()\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']\n    else:\n        return None\n\n# Get the current address balance\ndef getAddressBalance():\n    url = 'https://api.monero.org/v2/monero/address/' + getWalletAddress()\n    response = requests.get(url)\n    data = response.json()\n\n    # Return the balance if it's below the minimum threshold\n    if response.status_code == 200:\n        return data['balance']", "id": "d9e1ba5e-47b7-4eb9-846e-806980358c65", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Create a Python script to fetch user data", "input": "[GET] https://api.example.com/users", "output": "import requests\nimport json\nfrom pprint import *\n\n# get_ipython().run_line_magic('matplotlib', 'inline')\n\n# --------------------------------------------------------------------------------------------------------------------\n# GET USER DATA\n# --------------------------------------------------------------------------------------------------------------------\n\n# 1. GET\n# 1-1. Login\n# 1-2. Get user data\n# 1-3. Get data with access token\n# 1-4. Check data with bearer token\n# 1-5. Get user with token\n# 1-6. Get user with token\n# 1-7. Get user with token\n# 1-8. Get user data with access token\n# 1-9. Get user data with access token\n# 1-10. Get user data with access token\n# 1-11. Get user data with access token\n# 1-12. Get user data with access token\n# 1-13. Get user data with access token\n# 1-14. Get user data with access token\n# 1-15. Get user data with access token\n# 1-16. Get user data with access token\n# 1-17. Get user data with access token\n# 1-18. Get user data with access token\n# 1-19. Get user data with access token\n# 1-20. Get user data with access token\n# 1-21. Get user data with access token\n# 1-22. Get", "id": "e5034961-9bf7-4925-9167-da3b6bcf7684", "rejected_reason": "Permintaan HTTP tapi tidak ada metode GET/POST"}
{"instruction": "Write a Python script using the requests module to perform the following HTTP request.", "input": "[POST] https://example.com/api/login\nHeaders:\nContent-Type: application/json\n\nBody:\n{\"email\": \"jamal@gmail.com\", \"pass\": \"123456\"}", "output": "# [POST] https://example.com/api/login\n# {\n#    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MjM3ODA1NTk2MjYzMjQzNzE4MDAxMWViMjQ1NjI1MzQ0LTJhNDRmMzItMzkzNzM0ZjBhZDU2Y2ZmYjQzOCJ9.eyJpc3MiOiJodHRwczovL2ByZW5kZXJzaW9uIjoiMTI2MzU0MS1hMGUxNzg0MjY0MTAyNGE2MjYzOTI2Nzk0MjYzLCJhdWQiOiJodHRwczovL2ByZW5kZXJzaW9uIjoiYWJlIjoxNzE0MzU0Njk2YzA4MTYxNzE5MjA2MTM0MjM5MjYzMTIzNDUzNzg4LCJ", "id": "d1b05dba-fb1c-43b3-bcf1-f424fb83b662", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Create an automated script that performs recurring token swaps on the Monad network using a .har file as reference.", "input": "The .har file shows a POST request to a swap router on Monad with token addresses, amounts, deadlines, and user wallet addresses involved in the data payload. Design the automation to read wallets from 'wallets.txt' and continuously swap MON tokens with WSOL, DAK, ETH, YAKI, and CHOG tokens back and forth.", "output": "# Imports\nimport requests\nimport datetime\nimport time\nimport json\nimport sys\nimport os\nimport re\nimport requests\nimport hashlib\nimport base64\nimport string\nimport binascii\nimport pandas as pd\nimport numpy as np\nimport threading\nimport concurrent.futures\nimport shutil\nimport shutil\nimport uuid\nimport time\n\n\nclass monad_network_har_wrapper:\n\n    # Constructor\n    def __init__(self, token_address, token_amount, token_deadline, token_wallet, token_wallet_address, token_wallet_amount, token_wallet_deadline,\n                 token_wallet_wallet_address, token_wallet_wallet_amount, token_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_address, token_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_wallet_address, token_wallet_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_wallet_deadline,\n                 token_wallet_wallet_wallet_wallet_wallet_address, token_wallet_wallet_wallet_wallet_wallet_amount, token_wallet_wallet_wallet_wallet_wallet_deadline):\n        self.token_address = token", "id": "15c903c4-f05a-4a48-afd0-d0a553d2496e", "rejected_reason": "Script tidak mengimpor modul apa pun"}
{"instruction": "Write a Python script to run the entire MON swap routine in a loop with 6-hour delay.", "input": "Wrap the swap process in a while True loop, include try/except handling, and use time.sleep(21600) to wait between cycles.", "output": "import requests\nimport json\nimport time\nimport threading\n\nclass RestAPI():\n    def __init__(self, url, key, secret):\n        self.url = url\n        self.key = key\n        self.secret = secret\n\n    def get_swap_order(self, code):\n        params = {\n            'key': self.key,\n           'secret': self.secret,\n            'code': code\n        }\n        r = requests.get(url=self.url, params=params)\n        return json.loads(r.text)\n\nclass Swaps():\n    def __init__(self, swap_routine):\n        self.swap_routine = swap_routine\n\n    def get_swaps(self, code):\n        swap_order = self.swap_routine.get_swap_order(code)\n        if swap_order['code'] == code:\n            return swap_order['data']\n        elif swap_order['code']!= code:\n            raise Exception('Invalid swap code')\n        else:\n            raise Exception('Invalid swap order')\n\nclass SwapRoutine():\n    def __init__(self, api):\n        self.api = api\n\n    def get_swaps(self, code):\n        swap_order", "id": "a1bc2d66-69d0-44a4-96d3-7cfdeba42768", "rejected_reason": "Instruksi menyebut 'Web3' atau 'swap' tapi tidak ditemukan penggunaan Web3"}
{"instruction": "Write a script to allow user to input swap amount of MON.", "input": "Prompt the user at the beginning of the script to input how much MON to swap per token. Use this value for all wallets and tokens.", "output": "from requests import get, post\nfrom json import loads\n\ndef swap_mon():\n    swap_mon_dict = {\n    'NONE': '',\n    'BTC': 'BTC',\n    'ETH': 'ETH',\n    'XLM': 'XLM',\n    'USDT': 'USDT',\n    'DOGE': 'DOGE',\n    'TRX': 'TRX',\n    'USD': 'USD',\n    'EUR': 'EUR',\n    }\n    return swap_mon_dict.get(input('Input the amount of mon to swap in BTC: ').lower(), 'NONE')\n\ndef swap_tokens():\n    swap_tokens_dict = {\n    'NONE': '',\n    'BTC': 'BTC',\n    'ETH': 'ETH',\n    'XLM': 'XLM',\n    'USDT': 'USDT',\n    'DOGE': 'DOGE',\n    'TRX': 'TRX',\n    'USD': 'USD',\n    'EUR': 'EUR',\n    }\n    return swap_tokens_dict.get(input('Input the amount of tokens to swap in ETH: ').lower(), 'NONE')\n\ndef swap_all():\n    swap_", "id": "764ffccb-2820-49dc-958f-f3abfae93af2", "rejected_reason": "Script tidak mengimpor modul apa pun"}
